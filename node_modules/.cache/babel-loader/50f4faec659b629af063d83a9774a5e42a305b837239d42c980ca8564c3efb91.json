{"ast":null,"code":"import{supabase}from'./supabase';import{restaurantData}from'../data/restaurantData';// 레스토랑 관련 API\nexport const restaurantAPI={// 모든 레스토랑 조회\ngetAll:async()=>{try{const{data,error}=await supabase.from('restaurants').select('*');if(error){console.warn('Supabase 연결 실패, 기본 데이터 사용:',error);// 기본 데이터 반환\nreturn{data:restaurantData.map(restaurant=>({id:restaurant.id,name:restaurant.name,cuisine:restaurant.category,rating:restaurant.rating,address:restaurant.address,description:restaurant.description,latitude:restaurant.position.lat,longitude:restaurant.position.lng,phone:restaurant.phone,parking:restaurant.parking,businessHours:restaurant.hours}))};}// Supabase 데이터가 있으면 사용, 없으면 기본 데이터 사용\nif(data&&data.length>0){console.log('Supabase 데이터 사용:',data.length,'개 레스토랑');return{data:data};}else{console.log('Supabase 데이터 없음, 기본 데이터 사용');return{data:restaurantData.map(restaurant=>({id:restaurant.id,name:restaurant.name,cuisine:restaurant.category,rating:restaurant.rating,address:restaurant.address,description:restaurant.description,latitude:restaurant.position.lat,longitude:restaurant.position.lng,phone:restaurant.phone,parking:restaurant.parking,businessHours:restaurant.hours}))};}}catch(error){console.warn('API 호출 실패, 기본 데이터 사용:',error);return{data:restaurantData.map(restaurant=>({id:restaurant.id,name:restaurant.name,cuisine:restaurant.category,rating:restaurant.rating,address:restaurant.address,description:restaurant.description,latitude:restaurant.position.lat,longitude:restaurant.position.lng,phone:restaurant.phone,parking:restaurant.parking,businessHours:restaurant.hours}))};}},// ID로 레스토랑 조회\ngetById:async id=>{const{data,error}=await supabase.from('restaurants').select('*').eq('id',id).single();if(error)throw error;return{data};},// 새 레스토랑 추가\ncreate:async restaurant=>{const{data,error}=await supabase.from('restaurants').insert(restaurant).select().single();if(error)throw error;return{data};},// 레스토랑 정보 수정\nupdate:async(id,restaurant)=>{const{data,error}=await supabase.from('restaurants').update(restaurant).eq('id',id).select().single();if(error)throw error;return{data};},// 레스토랑 삭제\ndelete:async id=>{const{error}=await supabase.from('restaurants').delete().eq('id',id);if(error)throw error;return{success:true};},// 요리 타입으로 검색\ngetByCuisine:async cuisine=>{const{data,error}=await supabase.from('restaurants').select('*').eq('cuisine',cuisine);if(error)throw error;return{data};},// 평점으로 검색\ngetByRating:async rating=>{const{data,error}=await supabase.from('restaurants').select('*').gte('rating',rating);if(error)throw error;return{data};},// 키워드로 검색\nsearch:async keyword=>{const{data,error}=await supabase.from('restaurants').select('*').or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);if(error)throw error;return{data};},// 근처 레스토랑 검색\ngetNearby:async function(lat,lng){let radius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.01;const{data,error}=await supabase.from('restaurants').select('*').not('latitude','is',null).not('longitude','is',null);if(error)throw error;// 클라이언트에서 거리 계산\nconst nearby=data.filter(restaurant=>{const distance=Math.sqrt(Math.pow(restaurant.latitude-lat,2)+Math.pow(restaurant.longitude-lng,2));return distance<=radius;});return{data:nearby};},// 랜덤 레스토랑 추천\ngetRandom:async()=>{const{data,error}=await supabase.from('restaurants').select('*');if(error)throw error;if(data&&data.length>0){const randomIndex=Math.floor(Math.random()*data.length);return{data:data[randomIndex]};}return{data:null};}};export default restaurantAPI;","map":{"version":3,"names":["supabase","restaurantData","restaurantAPI","getAll","data","error","from","select","console","warn","map","restaurant","id","name","cuisine","category","rating","address","description","latitude","position","lat","longitude","lng","phone","parking","businessHours","hours","length","log","getById","eq","single","create","insert","update","delete","success","getByCuisine","getByRating","gte","search","keyword","or","getNearby","radius","arguments","undefined","not","nearby","filter","distance","Math","sqrt","pow","getRandom","randomIndex","floor","random"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/services/api.js"],"sourcesContent":["import { supabase } from './supabase';\nimport { restaurantData } from '../data/restaurantData';\n\n// 레스토랑 관련 API\nexport const restaurantAPI = {\n    // 모든 레스토랑 조회\n  getAll: async () => {\n    try {\n      const { data, error } = await supabase\n        .from('restaurants')\n        .select('*');\n      \n      if (error) {\n        console.warn('Supabase 연결 실패, 기본 데이터 사용:', error);\n        // 기본 데이터 반환\n        return { \n          data: restaurantData.map(restaurant => ({\n            id: restaurant.id,\n            name: restaurant.name,\n            cuisine: restaurant.category,\n            rating: restaurant.rating,\n            address: restaurant.address,\n            description: restaurant.description,\n            latitude: restaurant.position.lat,\n            longitude: restaurant.position.lng,\n            phone: restaurant.phone,\n            parking: restaurant.parking,\n            businessHours: restaurant.hours\n          }))\n        };\n      }\n      \n      // Supabase 데이터가 있으면 사용, 없으면 기본 데이터 사용\n      if (data && data.length > 0) {\n        console.log('Supabase 데이터 사용:', data.length, '개 레스토랑');\n        return { data: data };\n      } else {\n        console.log('Supabase 데이터 없음, 기본 데이터 사용');\n        return { \n          data: restaurantData.map(restaurant => ({\n            id: restaurant.id,\n            name: restaurant.name,\n            cuisine: restaurant.category,\n            rating: restaurant.rating,\n            address: restaurant.address,\n            description: restaurant.description,\n            latitude: restaurant.position.lat,\n            longitude: restaurant.position.lng,\n            phone: restaurant.phone,\n            parking: restaurant.parking,\n            businessHours: restaurant.hours\n          }))\n        };\n      }\n    } catch (error) {\n      console.warn('API 호출 실패, 기본 데이터 사용:', error);\n      return { \n        data: restaurantData.map(restaurant => ({\n          id: restaurant.id,\n          name: restaurant.name,\n          cuisine: restaurant.category,\n          rating: restaurant.rating,\n          address: restaurant.address,\n          description: restaurant.description,\n          latitude: restaurant.position.lat,\n          longitude: restaurant.position.lng,\n          phone: restaurant.phone,\n          parking: restaurant.parking,\n          businessHours: restaurant.hours\n        }))\n      };\n    }\n  },\n  \n  // ID로 레스토랑 조회\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 새 레스토랑 추가\n  create: async (restaurant) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .insert(restaurant)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 레스토랑 정보 수정\n  update: async (id, restaurant) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .update(restaurant)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 레스토랑 삭제\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('restaurants')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n    return { success: true };\n  },\n  \n  // 요리 타입으로 검색\n  getByCuisine: async (cuisine) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('cuisine', cuisine);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 평점으로 검색\n  getByRating: async (rating) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .gte('rating', rating);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 키워드로 검색\n  search: async (keyword) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 근처 레스토랑 검색\n  getNearby: async (lat, lng, radius = 0.01) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .not('latitude', 'is', null)\n      .not('longitude', 'is', null);\n    \n    if (error) throw error;\n    \n    // 클라이언트에서 거리 계산\n    const nearby = data.filter(restaurant => {\n      const distance = Math.sqrt(\n        Math.pow(restaurant.latitude - lat, 2) + \n        Math.pow(restaurant.longitude - lng, 2)\n      );\n      return distance <= radius;\n    });\n    \n    return { data: nearby };\n  },\n  \n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*');\n    \n    if (error) throw error;\n    \n    if (data && data.length > 0) {\n      const randomIndex = Math.floor(Math.random() * data.length);\n      return { data: data[randomIndex] };\n    }\n    \n    return { data: null };\n  },\n};\n\nexport default restaurantAPI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}