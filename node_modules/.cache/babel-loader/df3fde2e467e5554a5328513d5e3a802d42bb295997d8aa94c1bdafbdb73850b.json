{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const signup = (email, password, username) => {\n    // 실제로는 서버에 회원가입 요청을 보내야 합니다\n    const newUser = {\n      id: Date.now(),\n      email,\n      username,\n      createdAt: new Date().toISOString()\n    };\n    localStorage.setItem('user', JSON.stringify(newUser));\n    setCurrentUser(newUser);\n    return Promise.resolve(newUser);\n  };\n  const login = (email, password) => {\n    // 실제로는 서버에 로그인 요청을 보내야 합니다\n    // 여기서는 간단한 시뮬레이션을 위해 하드코딩된 사용자 정보를 사용합니다\n    const mockUsers = [{\n      id: 1,\n      email: 'test@test.com',\n      password: '123456',\n      username: '테스트사용자'\n    }, {\n      id: 2,\n      email: 'user@user.com',\n      password: '123456',\n      username: '일반사용자'\n    }];\n    const user = mockUsers.find(u => u.email === email && u.password === password);\n    if (user) {\n      const {\n        password,\n        ...userWithoutPassword\n      } = user;\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      setCurrentUser(userWithoutPassword);\n      return Promise.resolve(userWithoutPassword);\n    } else {\n      return Promise.reject(new Error('이메일 또는 비밀번호가 잘못되었습니다.'));\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signup","email","password","username","newUser","id","Date","now","createdAt","toISOString","setItem","stringify","Promise","resolve","login","mockUsers","user","find","u","userWithoutPassword","reject","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = (email, password, username) => {\n    // 실제로는 서버에 회원가입 요청을 보내야 합니다\n    const newUser = {\n      id: Date.now(),\n      email,\n      username,\n      createdAt: new Date().toISOString()\n    };\n    \n    localStorage.setItem('user', JSON.stringify(newUser));\n    setCurrentUser(newUser);\n    return Promise.resolve(newUser);\n  };\n\n  const login = (email, password) => {\n    // 실제로는 서버에 로그인 요청을 보내야 합니다\n    // 여기서는 간단한 시뮬레이션을 위해 하드코딩된 사용자 정보를 사용합니다\n    const mockUsers = [\n      { id: 1, email: 'test@test.com', password: '123456', username: '테스트사용자' },\n      { id: 2, email: 'user@user.com', password: '123456', username: '일반사용자' }\n    ];\n\n    const user = mockUsers.find(u => u.email === email && u.password === password);\n    \n    if (user) {\n      const { password, ...userWithoutPassword } = user;\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      setCurrentUser(userWithoutPassword);\n      return Promise.resolve(userWithoutPassword);\n    } else {\n      return Promise.reject(new Error('이메일 또는 비밀번호가 잘못되었습니다.'));\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,SAAS,EAAE;MACbH,cAAc,CAACM,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;IACvC;IACAD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,MAAM,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IAC5C;IACA,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdN,KAAK;MACLE,QAAQ;MACRK,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACpC,CAAC;IAEDb,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACP,OAAO,CAAC,CAAC;IACrDZ,cAAc,CAACY,OAAO,CAAC;IACvB,OAAOQ,OAAO,CAACC,OAAO,CAACT,OAAO,CAAC;EACjC,CAAC;EAED,MAAMU,KAAK,GAAGA,CAACb,KAAK,EAAEC,QAAQ,KAAK;IACjC;IACA;IACA,MAAMa,SAAS,GAAG,CAChB;MAAEV,EAAE,EAAE,CAAC;MAAEJ,KAAK,EAAE,eAAe;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAS,CAAC,EACzE;MAAEE,EAAE,EAAE,CAAC;MAAEJ,KAAK,EAAE,eAAe;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAQ,CAAC,CACzE;IAED,MAAMa,IAAI,GAAGD,SAAS,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,KAAK,KAAKA,KAAK,IAAIiB,CAAC,CAAChB,QAAQ,KAAKA,QAAQ,CAAC;IAE9E,IAAIc,IAAI,EAAE;MACR,MAAM;QAAEd,QAAQ;QAAE,GAAGiB;MAAoB,CAAC,GAAGH,IAAI;MACjDpB,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACQ,mBAAmB,CAAC,CAAC;MACjE3B,cAAc,CAAC2B,mBAAmB,CAAC;MACnC,OAAOP,OAAO,CAACC,OAAO,CAACM,mBAAmB,CAAC;IAC7C,CAAC,MAAM;MACL,OAAOP,OAAO,CAACQ,MAAM,CAAC,IAAIjC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC3D;EACF,CAAC;EAED,MAAMkC,MAAM,GAAGA,CAAA,KAAM;IACnBzB,YAAY,CAAC0B,UAAU,CAAC,MAAM,CAAC;IAC/B9B,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM+B,KAAK,GAAG;IACZhC,WAAW;IACXS,MAAM;IACNc,KAAK;IACLO,MAAM;IACN5B;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACyC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlC,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACtC,GAAA,CAjEWF,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}