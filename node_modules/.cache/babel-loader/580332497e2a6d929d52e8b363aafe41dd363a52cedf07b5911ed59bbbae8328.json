{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const signup = async (email, password, username) => {\n    try {\n      // Supabase에서 기존 사용자 확인\n      const {\n        data: existingUsers,\n        error: checkError\n      } = await supabase.from('users').select('*').eq('email', email);\n      if (checkError) {\n        console.error('사용자 확인 오류:', checkError);\n        throw new Error('사용자 확인 중 오류가 발생했습니다.');\n      }\n      if (existingUsers && existingUsers.length > 0) {\n        throw new Error('이미 존재하는 이메일입니다.');\n      }\n\n      // 새 사용자 생성 (Supabase에 저장)\n      const {\n        data: newUser,\n        error: insertError\n      } = await supabase.from('users').insert([{\n        username,\n        email,\n        password: password // 실제 프로덕션에서는 해시된 비밀번호 사용\n      }]).select().single();\n      if (insertError) {\n        console.error('사용자 생성 오류:', insertError);\n        throw new Error('회원가입 중 오류가 발생했습니다.');\n      }\n\n      // 로컬 스토리지에도 저장\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      console.log('회원가입 성공:', newUser);\n      return newUser;\n    } catch (error) {\n      console.error('회원가입 오류:', error);\n      throw error;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      // Supabase에서 사용자 확인\n      const {\n        data: users,\n        error\n      } = await supabase.from('users').select('*').eq('email', email);\n      if (error) {\n        console.error('로그인 확인 오류:', error);\n        throw new Error('로그인 확인 중 오류가 발생했습니다.');\n      }\n      if (!users || users.length === 0) {\n        throw new Error('존재하지 않는 이메일입니다.');\n      }\n      const user = users[0];\n\n      // 테스트 계정 확인 (비밀번호 검증 생략)\n      if (email === 'test@test.com' && password === '123456') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        console.log('테스트 계정 로그인 성공:', user);\n        return user;\n      }\n\n      // 일반 계정은 비밀번호 검증 없이 로그인 허용 (데모용)\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      console.log('로그인 성공:', user);\n      return user;\n    } catch (error) {\n      console.error('로그인 오류:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n    console.log('로그아웃 완료');\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signup","email","password","username","data","existingUsers","error","checkError","from","select","eq","console","length","newUser","insertError","insert","single","setItem","stringify","log","login","users","user","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = async (email, password, username) => {\n    try {\n      // Supabase에서 기존 사용자 확인\n      const { data: existingUsers, error: checkError } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', email);\n      \n      if (checkError) {\n        console.error('사용자 확인 오류:', checkError);\n        throw new Error('사용자 확인 중 오류가 발생했습니다.');\n      }\n\n      if (existingUsers && existingUsers.length > 0) {\n        throw new Error('이미 존재하는 이메일입니다.');\n      }\n\n      // 새 사용자 생성 (Supabase에 저장)\n      const { data: newUser, error: insertError } = await supabase\n        .from('users')\n        .insert([\n          {\n            username,\n            email,\n            password: password // 실제 프로덕션에서는 해시된 비밀번호 사용\n          }\n        ])\n        .select()\n        .single();\n\n      if (insertError) {\n        console.error('사용자 생성 오류:', insertError);\n        throw new Error('회원가입 중 오류가 발생했습니다.');\n      }\n\n      // 로컬 스토리지에도 저장\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      \n      console.log('회원가입 성공:', newUser);\n      return newUser;\n    } catch (error) {\n      console.error('회원가입 오류:', error);\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      // Supabase에서 사용자 확인\n      const { data: users, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', email);\n      \n      if (error) {\n        console.error('로그인 확인 오류:', error);\n        throw new Error('로그인 확인 중 오류가 발생했습니다.');\n      }\n\n      if (!users || users.length === 0) {\n        throw new Error('존재하지 않는 이메일입니다.');\n      }\n\n      const user = users[0];\n\n      // 테스트 계정 확인 (비밀번호 검증 생략)\n      if (email === 'test@test.com' && password === '123456') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        console.log('테스트 계정 로그인 성공:', user);\n        return user;\n      }\n\n      // 일반 계정은 비밀번호 검증 없이 로그인 허용 (데모용)\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      console.log('로그인 성공:', user);\n      return user;\n    } catch (error) {\n      console.error('로그인 오류:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n    console.log('로그아웃 완료');\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}