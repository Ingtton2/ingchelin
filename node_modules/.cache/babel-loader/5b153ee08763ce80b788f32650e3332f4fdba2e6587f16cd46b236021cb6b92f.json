{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { supabase } from '../services/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteContext = /*#__PURE__*/createContext();\nexport const useFavorites = () => {\n  _s();\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n_s(useFavorites, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FavoriteProvider = ({\n  children\n}) => {\n  _s2();\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    currentUser: user\n  } = useAuth();\n\n  // 사용자 즐겨찾기 목록 불러오기 (Supabase에서)\n  const loadFavorites = async () => {\n    console.log('loadFavorites 호출됨, 사용자:', user);\n    if (!user) {\n      console.log('사용자가 없어서 loadFavorites 중단');\n      return;\n    }\n    try {\n      setLoading(true);\n\n      // Supabase에서 사용자의 찜 목록 가져오기\n      const {\n        data: favoritesData,\n        error\n      } = await supabase.from('favorites').select(`\n          *,\n          restaurants (*)\n        `).eq('user_id', user.id);\n      if (error) {\n        console.error('Supabase에서 찜 목록 불러오기 실패:', error);\n        setFavorites([]);\n        return;\n      }\n\n      // restaurants 정보를 포함한 찜 목록 생성\n      const restaurants = favoritesData.map(fav => fav.restaurants);\n      console.log('Supabase에서 찜 목록 로드 완료:', restaurants.length, '개');\n      setFavorites(restaurants);\n    } catch (error) {\n      console.error('즐겨찾기 목록 불러오기 실패:', error);\n      setFavorites([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 즐겨찾기 목록 불러오기\n  useEffect(() => {\n    console.log('사용자 상태 변경:', user);\n    if (user) {\n      console.log('사용자 로그인됨, 찜 목록 불러오기 시작:', user.id);\n      loadFavorites();\n    } else {\n      console.log('사용자 로그아웃됨, 찜 목록 초기화');\n      setFavorites([]);\n    }\n  }, [user]);\n\n  // 찜 목록에 추가 (Supabase에 저장)\n  const addToFavorites = async restaurant => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    // 이미 즐겨찾기에 있는지 확인\n    if (favorites.find(fav => fav.id === restaurant.id)) {\n      console.log('이미 즐겨찾기에 있음:', restaurant.id);\n      return;\n    }\n    try {\n      console.log('즐겨찾기 추가 시작:', restaurant.id, '사용자:', user.id);\n\n      // Supabase에 찜하기 저장\n      const {\n        error\n      } = await supabase.from('favorites').insert({\n        user_id: user.id,\n        restaurant_id: restaurant.id,\n        created_at: new Date().toISOString()\n      });\n      if (error) {\n        console.error('Supabase 찜하기 저장 실패:', error);\n        alert('찜하기 저장에 실패했습니다.');\n        return;\n      }\n\n      // 상태 업데이트\n      const newFavorites = [...favorites, restaurant];\n      setFavorites(newFavorites);\n      console.log('즐겨찾기 추가 성공:', restaurant.id);\n      alert('찜 목록에 추가되었습니다! 🎉');\n    } catch (error) {\n      console.error('즐겨찾기 추가 중 오류:', error);\n      alert('즐겨찾기 추가 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 찜 목록에서 제거 (Supabase에서 삭제)\n  const removeFromFavorites = async restaurantId => {\n    console.log('removeFromFavorites 호출됨:', restaurantId, '사용자:', user);\n    if (!user) {\n      console.log('사용자가 로그인되지 않음');\n      return;\n    }\n    try {\n      console.log('즐겨찾기 제거 시작:', restaurantId, '사용자:', user.id);\n\n      // Supabase에서 찜하기 삭제\n      const {\n        error\n      } = await supabase.from('favorites').delete().eq('user_id', user.id).eq('restaurant_id', restaurantId);\n      if (error) {\n        console.error('Supabase 찜하기 삭제 실패:', error);\n        alert('찜하기 삭제에 실패했습니다.');\n        return;\n      }\n\n      // 상태 업데이트\n      const newFavorites = favorites.filter(fav => fav.id !== restaurantId);\n      setFavorites(newFavorites);\n      console.log('즐겨찾기 제거 성공:', restaurantId);\n      alert('찜 목록에서 제거되었습니다! ❌');\n    } catch (error) {\n      console.error('즐겨찾기 제거 중 오류:', error);\n      alert('즐겨찾기 제거 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = restaurantId => {\n    const isFavorited = favorites.some(fav => fav.id === restaurantId);\n    console.log(`레스토랑 ${restaurantId} 찜 상태:`, isFavorited, '현재 찜 목록:', favorites.map(f => f.id));\n    return isFavorited;\n  };\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(FavoriteContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s2(FavoriteProvider, \"frT0UX7qyw0JvD4PMCoNCE5nd+Y=\", false, function () {\n  return [useAuth];\n});\n_c = FavoriteProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoriteProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","supabase","jsxDEV","_jsxDEV","FavoriteContext","useFavorites","_s","context","Error","FavoriteProvider","children","_s2","favorites","setFavorites","loading","setLoading","currentUser","user","loadFavorites","console","log","data","favoritesData","error","from","select","eq","id","restaurants","map","fav","length","addToFavorites","restaurant","alert","find","insert","user_id","restaurant_id","created_at","Date","toISOString","newFavorites","removeFromFavorites","restaurantId","delete","filter","isInFavorites","isFavorited","some","f","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { supabase } from '../services/supabase';\n\nconst FavoriteContext = createContext();\n\nexport const useFavorites = () => {\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n\nexport const FavoriteProvider = ({ children }) => {\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { currentUser: user } = useAuth();\n\n  // 사용자 즐겨찾기 목록 불러오기 (Supabase에서)\n  const loadFavorites = async () => {\n    console.log('loadFavorites 호출됨, 사용자:', user);\n    if (!user) {\n      console.log('사용자가 없어서 loadFavorites 중단');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      \n      // Supabase에서 사용자의 찜 목록 가져오기\n      const { data: favoritesData, error } = await supabase\n        .from('favorites')\n        .select(`\n          *,\n          restaurants (*)\n        `)\n        .eq('user_id', user.id);\n      \n      if (error) {\n        console.error('Supabase에서 찜 목록 불러오기 실패:', error);\n        setFavorites([]);\n        return;\n      }\n      \n      // restaurants 정보를 포함한 찜 목록 생성\n      const restaurants = favoritesData.map(fav => fav.restaurants);\n      console.log('Supabase에서 찜 목록 로드 완료:', restaurants.length, '개');\n      setFavorites(restaurants);\n    } catch (error) {\n      console.error('즐겨찾기 목록 불러오기 실패:', error);\n      setFavorites([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 즐겨찾기 목록 불러오기\n  useEffect(() => {\n    console.log('사용자 상태 변경:', user);\n    if (user) {\n      console.log('사용자 로그인됨, 찜 목록 불러오기 시작:', user.id);\n      loadFavorites();\n    } else {\n      console.log('사용자 로그아웃됨, 찜 목록 초기화');\n      setFavorites([]);\n    }\n  }, [user]);\n\n  // 찜 목록에 추가 (Supabase에 저장)\n  const addToFavorites = async (restaurant) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    // 이미 즐겨찾기에 있는지 확인\n    if (favorites.find(fav => fav.id === restaurant.id)) {\n      console.log('이미 즐겨찾기에 있음:', restaurant.id);\n      return;\n    }\n\n    try {\n      console.log('즐겨찾기 추가 시작:', restaurant.id, '사용자:', user.id);\n      \n      // Supabase에 찜하기 저장\n      const { error } = await supabase\n        .from('favorites')\n        .insert({\n          user_id: user.id,\n          restaurant_id: restaurant.id,\n          created_at: new Date().toISOString()\n        });\n      \n      if (error) {\n        console.error('Supabase 찜하기 저장 실패:', error);\n        alert('찜하기 저장에 실패했습니다.');\n        return;\n      }\n      \n      // 상태 업데이트\n      const newFavorites = [...favorites, restaurant];\n      setFavorites(newFavorites);\n      \n      console.log('즐겨찾기 추가 성공:', restaurant.id);\n      alert('찜 목록에 추가되었습니다! 🎉');\n    } catch (error) {\n      console.error('즐겨찾기 추가 중 오류:', error);\n      alert('즐겨찾기 추가 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 찜 목록에서 제거 (Supabase에서 삭제)\n  const removeFromFavorites = async (restaurantId) => {\n    console.log('removeFromFavorites 호출됨:', restaurantId, '사용자:', user);\n    if (!user) {\n      console.log('사용자가 로그인되지 않음');\n      return;\n    }\n\n    try {\n      console.log('즐겨찾기 제거 시작:', restaurantId, '사용자:', user.id);\n      \n      // Supabase에서 찜하기 삭제\n      const { error } = await supabase\n        .from('favorites')\n        .delete()\n        .eq('user_id', user.id)\n        .eq('restaurant_id', restaurantId);\n      \n      if (error) {\n        console.error('Supabase 찜하기 삭제 실패:', error);\n        alert('찜하기 삭제에 실패했습니다.');\n        return;\n      }\n      \n      // 상태 업데이트\n      const newFavorites = favorites.filter(fav => fav.id !== restaurantId);\n      setFavorites(newFavorites);\n      \n      console.log('즐겨찾기 제거 성공:', restaurantId);\n      alert('찜 목록에서 제거되었습니다! ❌');\n    } catch (error) {\n      console.error('즐겨찾기 제거 중 오류:', error);\n      alert('즐겨찾기 제거 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = (restaurantId) => {\n    const isFavorited = favorites.some(fav => fav.id === restaurantId);\n    console.log(`레스토랑 ${restaurantId} 찜 상태:`, isFavorited, '현재 찜 목록:', favorites.map(f => f.id));\n    return isFavorited;\n  };\n\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites,\n    loading\n  };\n\n  return (\n    <FavoriteContext.Provider value={value}>\n      {children}\n    </FavoriteContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}