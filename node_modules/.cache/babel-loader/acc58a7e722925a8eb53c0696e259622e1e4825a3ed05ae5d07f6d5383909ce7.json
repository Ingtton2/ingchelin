{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const VisitContext=/*#__PURE__*/createContext();export const useVisit=()=>{const context=useContext(VisitContext);if(!context){throw new Error('useVisit must be used within a VisitProvider');}return context;};export const VisitProvider=_ref=>{let{children}=_ref;const[visitStatus,setVisitStatus]=useState({});const[loading,setLoading]=useState(false);const{currentUser:user}=useAuth();// 사용자 방문 기록 불러오기\nconst loadVisitStatus=async()=>{if(!user)return;try{setLoading(true);// 로컬 스토리지에서 방문 기록 불러오기\nconst savedVisits=localStorage.getItem(`visits_${user.id}`);if(savedVisits){const visits=JSON.parse(savedVisits);const statusMap={};visits.forEach(visit=>{statusMap[visit.restaurantId]=visit.rating>=4?'liked':'disliked';});setVisitStatus(statusMap);}else{setVisitStatus({});}}catch(error){console.error('방문 기록 불러오기 실패:',error);setVisitStatus({});}finally{setLoading(false);}};// 사용자 로그인 시 방문 기록 불러오기\nuseEffect(()=>{if(user){loadVisitStatus();}else{setVisitStatus({});}},[user]);// 방문 상태 설정 (로컬 스토리지에 저장)\nconst setRestaurantVisitStatus=async(restaurantId,status)=>{if(!user){alert('로그인이 필요합니다.');return;}try{const rating=status==='liked'?5:2;// 좋아함: 5점, 싫어함: 2점\n// 로컬 스토리지에 방문 기록 저장\nconst savedVisits=JSON.parse(localStorage.getItem(`visits_${user.id}`)||'[]');const newVisit={userId:user.id,restaurantId:restaurantId,rating:rating,review:status==='liked'?'좋아요!':'별로예요.',visitDate:new Date().toISOString()};// 기존 방문 기록이 있으면 업데이트, 없으면 추가\nconst existingIndex=savedVisits.findIndex(visit=>visit.restaurantId===restaurantId);if(existingIndex>=0){savedVisits[existingIndex]=newVisit;}else{savedVisits.push(newVisit);}localStorage.setItem(`visits_${user.id}`,JSON.stringify(savedVisits));// 상태 업데이트\nsetVisitStatus(prev=>({...prev,[restaurantId]:status}));}catch(error){console.error('방문 기록 저장 중 오류:',error);}};// 방문 상태 가져오기\nconst getRestaurantVisitStatus=restaurantId=>{return visitStatus[restaurantId]||'not-visited';// 'liked', 'disliked', 'not-visited'\n};// 방문 상태별 통계\nconst getVisitStats=()=>{const stats={liked:0,disliked:0,notVisited:0};Object.values(visitStatus).forEach(status=>{if(status==='liked')stats.liked++;else if(status==='disliked')stats.disliked++;});// 전체 식당 수에서 방문한 곳을 빼면 안 가본 곳\nconst totalRestaurants=20;// 현재 식당 데이터 수\nstats.notVisited=totalRestaurants-stats.liked-stats.disliked;return stats;};const value={visitStatus,setRestaurantVisitStatus,getRestaurantVisitStatus,getVisitStats,loading};return/*#__PURE__*/_jsx(VisitContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsx","_jsx","VisitContext","useVisit","context","Error","VisitProvider","_ref","children","visitStatus","setVisitStatus","loading","setLoading","currentUser","user","loadVisitStatus","savedVisits","localStorage","getItem","id","visits","JSON","parse","statusMap","forEach","visit","restaurantId","rating","error","console","setRestaurantVisitStatus","status","alert","newVisit","userId","review","visitDate","Date","toISOString","existingIndex","findIndex","push","setItem","stringify","prev","getRestaurantVisitStatus","getVisitStats","stats","liked","disliked","notVisited","Object","values","totalRestaurants","value","Provider"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/VisitContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\nconst VisitContext = createContext();\n\nexport const useVisit = () => {\n  const context = useContext(VisitContext);\n  if (!context) {\n    throw new Error('useVisit must be used within a VisitProvider');\n  }\n  return context;\n};\n\nexport const VisitProvider = ({ children }) => {\n  const [visitStatus, setVisitStatus] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { currentUser: user } = useAuth();\n\n  // 사용자 방문 기록 불러오기\n  const loadVisitStatus = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      // 로컬 스토리지에서 방문 기록 불러오기\n      const savedVisits = localStorage.getItem(`visits_${user.id}`);\n      if (savedVisits) {\n        const visits = JSON.parse(savedVisits);\n        const statusMap = {};\n        visits.forEach(visit => {\n          statusMap[visit.restaurantId] = visit.rating >= 4 ? 'liked' : 'disliked';\n        });\n        setVisitStatus(statusMap);\n      } else {\n        setVisitStatus({});\n      }\n    } catch (error) {\n      console.error('방문 기록 불러오기 실패:', error);\n      setVisitStatus({});\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 방문 기록 불러오기\n  useEffect(() => {\n    if (user) {\n      loadVisitStatus();\n    } else {\n      setVisitStatus({});\n    }\n  }, [user]);\n\n  // 방문 상태 설정 (로컬 스토리지에 저장)\n  const setRestaurantVisitStatus = async (restaurantId, status) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    try {\n      const rating = status === 'liked' ? 5 : 2; // 좋아함: 5점, 싫어함: 2점\n      \n      // 로컬 스토리지에 방문 기록 저장\n      const savedVisits = JSON.parse(localStorage.getItem(`visits_${user.id}`) || '[]');\n      const newVisit = {\n        userId: user.id,\n        restaurantId: restaurantId,\n        rating: rating,\n        review: status === 'liked' ? '좋아요!' : '별로예요.',\n        visitDate: new Date().toISOString()\n      };\n      \n      // 기존 방문 기록이 있으면 업데이트, 없으면 추가\n      const existingIndex = savedVisits.findIndex(visit => visit.restaurantId === restaurantId);\n      if (existingIndex >= 0) {\n        savedVisits[existingIndex] = newVisit;\n      } else {\n        savedVisits.push(newVisit);\n      }\n      \n      localStorage.setItem(`visits_${user.id}`, JSON.stringify(savedVisits));\n      \n      // 상태 업데이트\n      setVisitStatus(prev => ({\n        ...prev,\n        [restaurantId]: status\n      }));\n    } catch (error) {\n      console.error('방문 기록 저장 중 오류:', error);\n    }\n  };\n\n  // 방문 상태 가져오기\n  const getRestaurantVisitStatus = (restaurantId) => {\n    return visitStatus[restaurantId] || 'not-visited'; // 'liked', 'disliked', 'not-visited'\n  };\n\n  // 방문 상태별 통계\n  const getVisitStats = () => {\n    const stats = {\n      liked: 0,\n      disliked: 0,\n      notVisited: 0\n    };\n\n    Object.values(visitStatus).forEach(status => {\n      if (status === 'liked') stats.liked++;\n      else if (status === 'disliked') stats.disliked++;\n    });\n\n    // 전체 식당 수에서 방문한 곳을 빼면 안 가본 곳\n    const totalRestaurants = 20; // 현재 식당 데이터 수\n    stats.notVisited = totalRestaurants - stats.liked - stats.disliked;\n\n    return stats;\n  };\n\n  const value = {\n    visitStatus,\n    setRestaurantVisitStatus,\n    getRestaurantVisitStatus,\n    getVisitStats,\n    loading\n  };\n\n  return (\n    <VisitContext.Provider value={value}>\n      {children}\n    </VisitContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}