{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const signup = async (email, password, username) => {\n    try {\n      // 기존 사용자 확인\n      const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\n      const existingUser = existingUsers.find(user => user.email === email);\n      if (existingUser) {\n        throw new Error('이미 존재하는 이메일입니다.');\n      }\n\n      // 새 사용자 생성\n      const newUser = {\n        id: Date.now().toString(),\n        email,\n        username,\n        createdAt: new Date().toISOString()\n      };\n\n      // 사용자 목록에 추가\n      existingUsers.push(newUser);\n      localStorage.setItem('users', JSON.stringify(existingUsers));\n\n      // 현재 사용자로 설정\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      return newUser;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      // 저장된 사용자 목록에서 확인\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const user = users.find(u => u.email === email);\n      if (!user) {\n        throw new Error('존재하지 않는 이메일입니다.');\n      }\n\n      // 테스트 계정 확인 (비밀번호 검증 생략)\n      if (email === 'test@test.com' && password === '123456') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        return user;\n      }\n\n      // 일반 계정은 비밀번호 검증 없이 로그인 허용 (데모용)\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signup","email","password","username","existingUsers","existingUser","find","user","newUser","id","Date","now","toString","createdAt","toISOString","push","setItem","stringify","error","login","users","u","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = async (email, password, username) => {\n    try {\n      // 기존 사용자 확인\n      const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\n      const existingUser = existingUsers.find(user => user.email === email);\n      \n      if (existingUser) {\n        throw new Error('이미 존재하는 이메일입니다.');\n      }\n\n      // 새 사용자 생성\n      const newUser = {\n        id: Date.now().toString(),\n        email,\n        username,\n        createdAt: new Date().toISOString()\n      };\n\n      // 사용자 목록에 추가\n      existingUsers.push(newUser);\n      localStorage.setItem('users', JSON.stringify(existingUsers));\n\n      // 현재 사용자로 설정\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      return newUser;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      // 저장된 사용자 목록에서 확인\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const user = users.find(u => u.email === email);\n      \n      if (!user) {\n        throw new Error('존재하지 않는 이메일입니다.');\n      }\n\n      // 테스트 계정 확인 (비밀번호 검증 생략)\n      if (email === 'test@test.com' && password === '123456') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        return user;\n      }\n\n      // 일반 계정은 비밀번호 검증 없이 로그인 허용 (데모용)\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}