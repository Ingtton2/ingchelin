{"ast":null,"code":"import { supabase } from './supabase';\nimport { restaurantData } from '../data/restaurantData';\n\n// 레스토랑 관련 API\nexport const restaurantAPI = {\n  // 모든 레스토랑 조회\n  getAll: async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('restaurants').select('*');\n      if (error) {\n        console.warn('Supabase 연결 실패, 기본 데이터 사용:', error);\n        // 기본 데이터 반환\n        return {\n          data: restaurantData.map(restaurant => ({\n            id: restaurant.id,\n            name: restaurant.name,\n            cuisine: restaurant.category,\n            rating: restaurant.rating,\n            address: restaurant.address,\n            description: restaurant.description,\n            latitude: restaurant.position.lat,\n            longitude: restaurant.position.lng,\n            phone: restaurant.phone,\n            parking: restaurant.parking,\n            businessHours: restaurant.hours\n          }))\n        };\n      }\n\n      // Supabase 데이터가 있으면 사용, 없으면 기본 데이터 사용\n      if (data && data.length > 0) {\n        console.log('Supabase 데이터 사용:', data.length, '개 레스토랑');\n        return {\n          data: data\n        };\n      } else {\n        console.log('Supabase 데이터 없음, 기본 데이터 사용');\n        return {\n          data: restaurantData.map(restaurant => ({\n            id: restaurant.id,\n            name: restaurant.name,\n            cuisine: restaurant.category,\n            rating: restaurant.rating,\n            address: restaurant.address,\n            description: restaurant.description,\n            latitude: restaurant.position.lat,\n            longitude: restaurant.position.lng,\n            phone: restaurant.phone,\n            parking: restaurant.parking,\n            businessHours: restaurant.hours\n          }))\n        };\n      }\n    } catch (error) {\n      console.warn('API 호출 실패, 기본 데이터 사용:', error);\n      return {\n        data: restaurantData.map(restaurant => ({\n          id: restaurant.id,\n          name: restaurant.name,\n          cuisine: restaurant.category,\n          rating: restaurant.rating,\n          address: restaurant.address,\n          description: restaurant.description,\n          latitude: restaurant.position.lat,\n          longitude: restaurant.position.lng,\n          phone: restaurant.phone,\n          parking: restaurant.parking,\n          businessHours: restaurant.hours\n        }))\n      };\n    }\n  },\n  // ID로 레스토랑 조회\n  getById: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').eq('id', id).single();\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 새 레스토랑 추가\n  create: async restaurant => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').insert(restaurant).select().single();\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 레스토랑 정보 수정\n  update: async (id, restaurant) => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').update(restaurant).eq('id', id).select().single();\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 레스토랑 삭제\n  delete: async id => {\n    const {\n      error\n    } = await supabase.from('restaurants').delete().eq('id', id);\n    if (error) throw error;\n    return {\n      success: true\n    };\n  },\n  // 요리 타입으로 검색\n  getByCuisine: async cuisine => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').eq('cuisine', cuisine);\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 평점으로 검색\n  getByRating: async rating => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').gte('rating', rating);\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 키워드로 검색\n  search: async keyword => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 근처 레스토랑 검색\n  getNearby: async (lat, lng, radius = 0.01) => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').not('latitude', 'is', null).not('longitude', 'is', null);\n    if (error) throw error;\n\n    // 클라이언트에서 거리 계산\n    const nearby = data.filter(restaurant => {\n      const distance = Math.sqrt(Math.pow(restaurant.latitude - lat, 2) + Math.pow(restaurant.longitude - lng, 2));\n      return distance <= radius;\n    });\n    return {\n      data: nearby\n    };\n  },\n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*');\n    if (error) throw error;\n    if (data && data.length > 0) {\n      const randomIndex = Math.floor(Math.random() * data.length);\n      return {\n        data: data[randomIndex]\n      };\n    }\n    return {\n      data: null\n    };\n  }\n};\nexport default restaurantAPI;","map":{"version":3,"names":["supabase","restaurantData","restaurantAPI","getAll","data","error","from","select","console","warn","map","restaurant","id","name","cuisine","category","rating","address","description","latitude","position","lat","longitude","lng","phone","parking","businessHours","hours","length","log","getById","eq","single","create","insert","update","delete","success","getByCuisine","getByRating","gte","search","keyword","or","getNearby","radius","not","nearby","filter","distance","Math","sqrt","pow","getRandom","randomIndex","floor","random"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/services/api.js"],"sourcesContent":["import { supabase } from './supabase';\nimport { restaurantData } from '../data/restaurantData';\n\n// 레스토랑 관련 API\nexport const restaurantAPI = {\n    // 모든 레스토랑 조회\n  getAll: async () => {\n    try {\n      const { data, error } = await supabase\n        .from('restaurants')\n        .select('*');\n      \n      if (error) {\n        console.warn('Supabase 연결 실패, 기본 데이터 사용:', error);\n        // 기본 데이터 반환\n        return { \n          data: restaurantData.map(restaurant => ({\n            id: restaurant.id,\n            name: restaurant.name,\n            cuisine: restaurant.category,\n            rating: restaurant.rating,\n            address: restaurant.address,\n            description: restaurant.description,\n            latitude: restaurant.position.lat,\n            longitude: restaurant.position.lng,\n            phone: restaurant.phone,\n            parking: restaurant.parking,\n            businessHours: restaurant.hours\n          }))\n        };\n      }\n      \n      // Supabase 데이터가 있으면 사용, 없으면 기본 데이터 사용\n      if (data && data.length > 0) {\n        console.log('Supabase 데이터 사용:', data.length, '개 레스토랑');\n        return { data: data };\n      } else {\n        console.log('Supabase 데이터 없음, 기본 데이터 사용');\n        return { \n          data: restaurantData.map(restaurant => ({\n            id: restaurant.id,\n            name: restaurant.name,\n            cuisine: restaurant.category,\n            rating: restaurant.rating,\n            address: restaurant.address,\n            description: restaurant.description,\n            latitude: restaurant.position.lat,\n            longitude: restaurant.position.lng,\n            phone: restaurant.phone,\n            parking: restaurant.parking,\n            businessHours: restaurant.hours\n          }))\n        };\n      }\n    } catch (error) {\n      console.warn('API 호출 실패, 기본 데이터 사용:', error);\n      return { \n        data: restaurantData.map(restaurant => ({\n          id: restaurant.id,\n          name: restaurant.name,\n          cuisine: restaurant.category,\n          rating: restaurant.rating,\n          address: restaurant.address,\n          description: restaurant.description,\n          latitude: restaurant.position.lat,\n          longitude: restaurant.position.lng,\n          phone: restaurant.phone,\n          parking: restaurant.parking,\n          businessHours: restaurant.hours\n        }))\n      };\n    }\n  },\n  \n  // ID로 레스토랑 조회\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 새 레스토랑 추가\n  create: async (restaurant) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .insert(restaurant)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 레스토랑 정보 수정\n  update: async (id, restaurant) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .update(restaurant)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 레스토랑 삭제\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('restaurants')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n    return { success: true };\n  },\n  \n  // 요리 타입으로 검색\n  getByCuisine: async (cuisine) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('cuisine', cuisine);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 평점으로 검색\n  getByRating: async (rating) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .gte('rating', rating);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 키워드로 검색\n  search: async (keyword) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 근처 레스토랑 검색\n  getNearby: async (lat, lng, radius = 0.01) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .not('latitude', 'is', null)\n      .not('longitude', 'is', null);\n    \n    if (error) throw error;\n    \n    // 클라이언트에서 거리 계산\n    const nearby = data.filter(restaurant => {\n      const distance = Math.sqrt(\n        Math.pow(restaurant.latitude - lat, 2) + \n        Math.pow(restaurant.longitude - lng, 2)\n      );\n      return distance <= radius;\n    });\n    \n    return { data: nearby };\n  },\n  \n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*');\n    \n    if (error) throw error;\n    \n    if (data && data.length > 0) {\n      const randomIndex = Math.floor(Math.random() * data.length);\n      return { data: data[randomIndex] };\n    }\n    \n    return { data: null };\n  },\n};\n\nexport default restaurantAPI; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAc,QAAQ,wBAAwB;;AAEvD;AACA,OAAO,MAAMC,aAAa,GAAG;EACzB;EACFC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC;MAEd,IAAIF,KAAK,EAAE;QACTG,OAAO,CAACC,IAAI,CAAC,4BAA4B,EAAEJ,KAAK,CAAC;QACjD;QACA,OAAO;UACLD,IAAI,EAAEH,cAAc,CAACS,GAAG,CAACC,UAAU,KAAK;YACtCC,EAAE,EAAED,UAAU,CAACC,EAAE;YACjBC,IAAI,EAAEF,UAAU,CAACE,IAAI;YACrBC,OAAO,EAAEH,UAAU,CAACI,QAAQ;YAC5BC,MAAM,EAAEL,UAAU,CAACK,MAAM;YACzBC,OAAO,EAAEN,UAAU,CAACM,OAAO;YAC3BC,WAAW,EAAEP,UAAU,CAACO,WAAW;YACnCC,QAAQ,EAAER,UAAU,CAACS,QAAQ,CAACC,GAAG;YACjCC,SAAS,EAAEX,UAAU,CAACS,QAAQ,CAACG,GAAG;YAClCC,KAAK,EAAEb,UAAU,CAACa,KAAK;YACvBC,OAAO,EAAEd,UAAU,CAACc,OAAO;YAC3BC,aAAa,EAAEf,UAAU,CAACgB;UAC5B,CAAC,CAAC;QACJ,CAAC;MACH;;MAEA;MACA,IAAIvB,IAAI,IAAIA,IAAI,CAACwB,MAAM,GAAG,CAAC,EAAE;QAC3BpB,OAAO,CAACqB,GAAG,CAAC,kBAAkB,EAAEzB,IAAI,CAACwB,MAAM,EAAE,QAAQ,CAAC;QACtD,OAAO;UAAExB,IAAI,EAAEA;QAAK,CAAC;MACvB,CAAC,MAAM;QACLI,OAAO,CAACqB,GAAG,CAAC,4BAA4B,CAAC;QACzC,OAAO;UACLzB,IAAI,EAAEH,cAAc,CAACS,GAAG,CAACC,UAAU,KAAK;YACtCC,EAAE,EAAED,UAAU,CAACC,EAAE;YACjBC,IAAI,EAAEF,UAAU,CAACE,IAAI;YACrBC,OAAO,EAAEH,UAAU,CAACI,QAAQ;YAC5BC,MAAM,EAAEL,UAAU,CAACK,MAAM;YACzBC,OAAO,EAAEN,UAAU,CAACM,OAAO;YAC3BC,WAAW,EAAEP,UAAU,CAACO,WAAW;YACnCC,QAAQ,EAAER,UAAU,CAACS,QAAQ,CAACC,GAAG;YACjCC,SAAS,EAAEX,UAAU,CAACS,QAAQ,CAACG,GAAG;YAClCC,KAAK,EAAEb,UAAU,CAACa,KAAK;YACvBC,OAAO,EAAEd,UAAU,CAACc,OAAO;YAC3BC,aAAa,EAAEf,UAAU,CAACgB;UAC5B,CAAC,CAAC;QACJ,CAAC;MACH;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdG,OAAO,CAACC,IAAI,CAAC,uBAAuB,EAAEJ,KAAK,CAAC;MAC5C,OAAO;QACLD,IAAI,EAAEH,cAAc,CAACS,GAAG,CAACC,UAAU,KAAK;UACtCC,EAAE,EAAED,UAAU,CAACC,EAAE;UACjBC,IAAI,EAAEF,UAAU,CAACE,IAAI;UACrBC,OAAO,EAAEH,UAAU,CAACI,QAAQ;UAC5BC,MAAM,EAAEL,UAAU,CAACK,MAAM;UACzBC,OAAO,EAAEN,UAAU,CAACM,OAAO;UAC3BC,WAAW,EAAEP,UAAU,CAACO,WAAW;UACnCC,QAAQ,EAAER,UAAU,CAACS,QAAQ,CAACC,GAAG;UACjCC,SAAS,EAAEX,UAAU,CAACS,QAAQ,CAACG,GAAG;UAClCC,KAAK,EAAEb,UAAU,CAACa,KAAK;UACvBC,OAAO,EAAEd,UAAU,CAACc,OAAO;UAC3BC,aAAa,EAAEf,UAAU,CAACgB;QAC5B,CAAC,CAAC;MACJ,CAAC;IACH;EACF,CAAC;EAED;EACAG,OAAO,EAAE,MAAOlB,EAAE,IAAK;IACrB,MAAM;MAAER,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXwB,EAAE,CAAC,IAAI,EAAEnB,EAAE,CAAC,CACZoB,MAAM,CAAC,CAAC;IAEX,IAAI3B,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAED;IAAK,CAAC;EACjB,CAAC;EAED;EACA6B,MAAM,EAAE,MAAOtB,UAAU,IAAK;IAC5B,MAAM;MAAEP,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnB4B,MAAM,CAACvB,UAAU,CAAC,CAClBJ,MAAM,CAAC,CAAC,CACRyB,MAAM,CAAC,CAAC;IAEX,IAAI3B,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAED;IAAK,CAAC;EACjB,CAAC;EAED;EACA+B,MAAM,EAAE,MAAAA,CAAOvB,EAAE,EAAED,UAAU,KAAK;IAChC,MAAM;MAAEP,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnB6B,MAAM,CAACxB,UAAU,CAAC,CAClBoB,EAAE,CAAC,IAAI,EAAEnB,EAAE,CAAC,CACZL,MAAM,CAAC,CAAC,CACRyB,MAAM,CAAC,CAAC;IAEX,IAAI3B,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAED;IAAK,CAAC;EACjB,CAAC;EAED;EACAgC,MAAM,EAAE,MAAOxB,EAAE,IAAK;IACpB,MAAM;MAAEP;IAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAAC,aAAa,CAAC,CACnB8B,MAAM,CAAC,CAAC,CACRL,EAAE,CAAC,IAAI,EAAEnB,EAAE,CAAC;IAEf,IAAIP,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAEgC,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED;EACAC,YAAY,EAAE,MAAOxB,OAAO,IAAK;IAC/B,MAAM;MAAEV,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXwB,EAAE,CAAC,SAAS,EAAEjB,OAAO,CAAC;IAEzB,IAAIT,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAED;IAAK,CAAC;EACjB,CAAC;EAED;EACAmC,WAAW,EAAE,MAAOvB,MAAM,IAAK;IAC7B,MAAM;MAAEZ,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXiC,GAAG,CAAC,QAAQ,EAAExB,MAAM,CAAC;IAExB,IAAIX,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAED;IAAK,CAAC;EACjB,CAAC;EAED;EACAqC,MAAM,EAAE,MAAOC,OAAO,IAAK;IACzB,MAAM;MAAEtC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXoC,EAAE,CAAC,eAAeD,OAAO,wBAAwBA,OAAO,GAAG,CAAC;IAE/D,IAAIrC,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAED;IAAK,CAAC;EACjB,CAAC;EAED;EACAwC,SAAS,EAAE,MAAAA,CAAOvB,GAAG,EAAEE,GAAG,EAAEsB,MAAM,GAAG,IAAI,KAAK;IAC5C,MAAM;MAAEzC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXuC,GAAG,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAC3BA,GAAG,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC;IAE/B,IAAIzC,KAAK,EAAE,MAAMA,KAAK;;IAEtB;IACA,MAAM0C,MAAM,GAAG3C,IAAI,CAAC4C,MAAM,CAACrC,UAAU,IAAI;MACvC,MAAMsC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CACxBD,IAAI,CAACE,GAAG,CAACzC,UAAU,CAACQ,QAAQ,GAAGE,GAAG,EAAE,CAAC,CAAC,GACtC6B,IAAI,CAACE,GAAG,CAACzC,UAAU,CAACW,SAAS,GAAGC,GAAG,EAAE,CAAC,CACxC,CAAC;MACD,OAAO0B,QAAQ,IAAIJ,MAAM;IAC3B,CAAC,CAAC;IAEF,OAAO;MAAEzC,IAAI,EAAE2C;IAAO,CAAC;EACzB,CAAC;EAED;EACAM,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,MAAM;MAAEjD,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC;IAEd,IAAIF,KAAK,EAAE,MAAMA,KAAK;IAEtB,IAAID,IAAI,IAAIA,IAAI,CAACwB,MAAM,GAAG,CAAC,EAAE;MAC3B,MAAM0B,WAAW,GAAGJ,IAAI,CAACK,KAAK,CAACL,IAAI,CAACM,MAAM,CAAC,CAAC,GAAGpD,IAAI,CAACwB,MAAM,CAAC;MAC3D,OAAO;QAAExB,IAAI,EAAEA,IAAI,CAACkD,WAAW;MAAE,CAAC;IACpC;IAEA,OAAO;MAAElD,IAAI,EAAE;IAAK,CAAC;EACvB;AACF,CAAC;AAED,eAAeF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}