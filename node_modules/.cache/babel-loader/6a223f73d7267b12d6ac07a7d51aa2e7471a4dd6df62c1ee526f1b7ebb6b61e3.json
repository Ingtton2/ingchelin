{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// 로컬 스토리지에서 사용자 정보 확인\nconst savedUser=localStorage.getItem('user');if(savedUser){setCurrentUser(JSON.parse(savedUser));}setLoading(false);},[]);const signup=async(email,password,username)=>{try{const response=await fetch('http://localhost:8081/api/auth/signup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password,username})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'회원가입에 실패했습니다.');}const user=await response.json();localStorage.setItem('user',JSON.stringify(user));setCurrentUser(user);return user;}catch(error){throw error;}};const login=async(email,password)=>{try{const response=await fetch('http://localhost:8081/api/auth/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'로그인에 실패했습니다.');}const user=await response.json();localStorage.setItem('user',JSON.stringify(user));setCurrentUser(user);return user;}catch(error){throw error;}};const logout=()=>{localStorage.removeItem('user');setCurrentUser(null);};const value={currentUser,signup,login,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signup","email","password","username","response","fetch","method","headers","body","stringify","ok","errorData","json","error","user","setItem","login","logout","removeItem","value","Provider"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = async (email, password, username) => {\n    try {\n      const response = await fetch('http://localhost:8081/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, username }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '회원가입에 실패했습니다.');\n      }\n\n      const user = await response.json();\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:8081/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '로그인에 실패했습니다.');\n      }\n\n      const user = await response.json();\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAO,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGP,UAAU,CAACK,WAAW,CAAC,CACvC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAc,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC9C,GAAIF,SAAS,CAAE,CACbH,cAAc,CAACM,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC,CACvC,CACAD,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,MAAM,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,CAAEC,QAAQ,GAAK,CAClD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,uCAAuC,CAAE,CACpEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEV,IAAI,CAACW,SAAS,CAAC,CAAER,KAAK,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CACpD,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACM,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAzB,KAAK,CAACwB,SAAS,CAACE,KAAK,EAAI,eAAe,CAAC,CACrD,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClChB,YAAY,CAACmB,OAAO,CAAC,MAAM,CAAEjB,IAAI,CAACW,SAAS,CAACK,IAAI,CAAC,CAAC,CAClDtB,cAAc,CAACsB,IAAI,CAAC,CACpB,MAAO,CAAAA,IAAI,CACb,CAAE,MAAOD,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAG,KAAK,CAAG,KAAAA,CAAOf,KAAK,CAAEC,QAAQ,GAAK,CACvC,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,sCAAsC,CAAE,CACnEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEV,IAAI,CAACW,SAAS,CAAC,CAAER,KAAK,CAAEC,QAAS,CAAC,CAC1C,CAAC,CAAC,CAEF,GAAI,CAACE,QAAQ,CAACM,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAzB,KAAK,CAACwB,SAAS,CAACE,KAAK,EAAI,cAAc,CAAC,CACpD,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClChB,YAAY,CAACmB,OAAO,CAAC,MAAM,CAAEjB,IAAI,CAACW,SAAS,CAACK,IAAI,CAAC,CAAC,CAClDtB,cAAc,CAACsB,IAAI,CAAC,CACpB,MAAO,CAAAA,IAAI,CACb,CAAE,MAAOD,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAI,MAAM,CAAGA,CAAA,GAAM,CACnBrB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC,CAC/B1B,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAA2B,KAAK,CAAG,CACZ5B,WAAW,CACXS,MAAM,CACNgB,KAAK,CACLC,MAAM,CACNxB,OACF,CAAC,CAED,mBACEV,IAAA,CAACC,WAAW,CAACoC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAA7B,QAAA,CAChC,CAACG,OAAO,EAAIH,QAAQ,CACD,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}