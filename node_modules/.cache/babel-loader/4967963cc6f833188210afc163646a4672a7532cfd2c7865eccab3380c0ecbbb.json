{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Supabase 환경변수가 설정되지 않았습니다.');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Supabase를 통한 직접 데이터 접근 (백엔드 없이 사용 가능)\nexport const supabaseAPI = {\n  // 모든 레스토랑 조회\n  getAll: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*');\n    if (error) throw error;\n    return data;\n  },\n  // ID로 레스토랑 조회\n  getById: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').eq('id', id).single();\n    if (error) throw error;\n    return data;\n  },\n  // 요리 타입으로 검색\n  getByCuisine: async cuisine => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').eq('cuisine', cuisine);\n    if (error) throw error;\n    return data;\n  },\n  // 평점으로 검색\n  getByRating: async rating => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').gte('rating', rating);\n    if (error) throw error;\n    return data;\n  },\n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').limit(1).order('id', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data[0];\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","console","error","supabase","supabaseAPI","getAll","data","from","select","getById","id","eq","single","getByCuisine","cuisine","getByRating","rating","gte","getRandom","limit","order","ascending"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Supabase 환경변수가 설정되지 않았습니다.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Supabase를 통한 직접 데이터 접근 (백엔드 없이 사용 가능)\nexport const supabaseAPI = {\n  // 모든 레스토랑 조회\n  getAll: async () => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*');\n    \n    if (error) throw error;\n    return data;\n  },\n  \n  // ID로 레스토랑 조회\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return data;\n  },\n  \n  // 요리 타입으로 검색\n  getByCuisine: async (cuisine) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('cuisine', cuisine);\n    \n    if (error) throw error;\n    return data;\n  },\n  \n  // 평점으로 검색\n  getByRating: async (rating) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .gte('rating', rating);\n    \n    if (error) throw error;\n    return data;\n  },\n  \n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .limit(1)\n      .order('id', { ascending: false });\n    \n    if (error) throw error;\n    return data[0];\n  }\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE/D,IAAI,CAACL,WAAW,IAAI,CAACI,eAAe,EAAE;EACpCE,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;AAC7C;AAEA,OAAO,MAAMC,QAAQ,GAAGT,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;;AAElE;AACA,OAAO,MAAMK,WAAW,GAAG;EACzB;EACAC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,MAAM;MAAEC,IAAI;MAAEJ;IAAM,CAAC,GAAG,MAAMC,QAAQ,CACnCI,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC;IAEd,IAAIN,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOI,IAAI;EACb,CAAC;EAED;EACAG,OAAO,EAAE,MAAOC,EAAE,IAAK;IACrB,MAAM;MAAEJ,IAAI;MAAEJ;IAAM,CAAC,GAAG,MAAMC,QAAQ,CACnCI,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXG,EAAE,CAAC,IAAI,EAAED,EAAE,CAAC,CACZE,MAAM,CAAC,CAAC;IAEX,IAAIV,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOI,IAAI;EACb,CAAC;EAED;EACAO,YAAY,EAAE,MAAOC,OAAO,IAAK;IAC/B,MAAM;MAAER,IAAI;MAAEJ;IAAM,CAAC,GAAG,MAAMC,QAAQ,CACnCI,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXG,EAAE,CAAC,SAAS,EAAEG,OAAO,CAAC;IAEzB,IAAIZ,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOI,IAAI;EACb,CAAC;EAED;EACAS,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7B,MAAM;MAAEV,IAAI;MAAEJ;IAAM,CAAC,GAAG,MAAMC,QAAQ,CACnCI,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXS,GAAG,CAAC,QAAQ,EAAED,MAAM,CAAC;IAExB,IAAId,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOI,IAAI;EACb,CAAC;EAED;EACAY,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,MAAM;MAAEZ,IAAI;MAAEJ;IAAM,CAAC,GAAG,MAAMC,QAAQ,CACnCI,IAAI,CAAC,aAAa,CAAC,CACnBC,MAAM,CAAC,GAAG,CAAC,CACXW,KAAK,CAAC,CAAC,CAAC,CACRC,KAAK,CAAC,IAAI,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAEpC,IAAInB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOI,IAAI,CAAC,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}