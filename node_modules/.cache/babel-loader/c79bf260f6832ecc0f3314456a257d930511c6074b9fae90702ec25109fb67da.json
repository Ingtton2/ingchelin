{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteContext = /*#__PURE__*/createContext();\nexport const useFavorites = () => {\n  _s();\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n_s(useFavorites, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FavoriteProvider = ({\n  children\n}) => {\n  _s2();\n  const [favorites, setFavorites] = useState([]);\n\n  // 로컬 스토리지에서 찜 목록 불러오기\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('favorites');\n    if (savedFavorites) {\n      setFavorites(JSON.parse(savedFavorites));\n    }\n  }, []);\n\n  // 찜 목록 변경 시 로컬 스토리지에 저장\n  useEffect(() => {\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n  }, [favorites]);\n\n  // 찜 목록에 추가\n  const addToFavorites = restaurant => {\n    if (!favorites.find(fav => fav.id === restaurant.id)) {\n      setFavorites(prev => [...prev, restaurant]);\n    }\n  };\n\n  // 찜 목록에서 제거\n  const removeFromFavorites = restaurantId => {\n    setFavorites(prev => prev.filter(fav => fav.id !== restaurantId));\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = restaurantId => {\n    return favorites.some(fav => fav.id === restaurantId);\n  };\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites\n  };\n  return /*#__PURE__*/_jsxDEV(FavoriteContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s2(FavoriteProvider, \"Ta5Hg12StVSJiEMWMKYcop5OdxE=\");\n_c = FavoriteProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoriteProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","FavoriteContext","useFavorites","_s","context","Error","FavoriteProvider","children","_s2","favorites","setFavorites","savedFavorites","localStorage","getItem","JSON","parse","setItem","stringify","addToFavorites","restaurant","find","fav","id","prev","removeFromFavorites","restaurantId","filter","isInFavorites","some","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst FavoriteContext = createContext();\n\nexport const useFavorites = () => {\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n\nexport const FavoriteProvider = ({ children }) => {\n  const [favorites, setFavorites] = useState([]);\n\n  // 로컬 스토리지에서 찜 목록 불러오기\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('favorites');\n    if (savedFavorites) {\n      setFavorites(JSON.parse(savedFavorites));\n    }\n  }, []);\n\n  // 찜 목록 변경 시 로컬 스토리지에 저장\n  useEffect(() => {\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n  }, [favorites]);\n\n  // 찜 목록에 추가\n  const addToFavorites = (restaurant) => {\n    if (!favorites.find(fav => fav.id === restaurant.id)) {\n      setFavorites(prev => [...prev, restaurant]);\n    }\n  };\n\n  // 찜 목록에서 제거\n  const removeFromFavorites = (restaurantId) => {\n    setFavorites(prev => prev.filter(fav => fav.id !== restaurantId));\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = (restaurantId) => {\n    return favorites.some(fav => fav.id === restaurantId);\n  };\n\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites\n  };\n\n  return (\n    <FavoriteContext.Provider value={value}>\n      {children}\n    </FavoriteContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,OAAO,GAAGR,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EACxE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,YAAY;AAQzB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,IAAIF,cAAc,EAAE;MAClBD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAb,SAAS,CAAC,MAAM;IACdc,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEF,IAAI,CAACG,SAAS,CAACR,SAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMS,cAAc,GAAIC,UAAU,IAAK;IACrC,IAAI,CAACV,SAAS,CAACW,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKH,UAAU,CAACG,EAAE,CAAC,EAAE;MACpDZ,YAAY,CAACa,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,UAAU,CAAC,CAAC;IAC7C;EACF,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAIC,YAAY,IAAK;IAC5Cf,YAAY,CAACa,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACL,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKG,YAAY,CAAC,CAAC;EACnE,CAAC;;EAED;EACA,MAAME,aAAa,GAAIF,YAAY,IAAK;IACtC,OAAOhB,SAAS,CAACmB,IAAI,CAACP,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKG,YAAY,CAAC;EACvD,CAAC;EAED,MAAMI,KAAK,GAAG;IACZpB,SAAS;IACTS,cAAc;IACdM,mBAAmB;IACnBG;EACF,CAAC;EAED,oBACE3B,OAAA,CAACC,eAAe,CAAC6B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EACpCA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAC1B,GAAA,CA7CWF,gBAAgB;AAAA6B,EAAA,GAAhB7B,gBAAgB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}