{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../services/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// 로컬 스토리지에서 사용자 정보 확인\nconst savedUser=localStorage.getItem('user');if(savedUser){setCurrentUser(JSON.parse(savedUser));}setLoading(false);},[]);const signup=async(email,password,username)=>{try{// Supabase에서 기존 사용자 확인\nconst{data:existingUsers,error:checkError}=await supabase.from('users').select('*').eq('email',email);if(checkError){console.error('사용자 확인 오류:',checkError);throw new Error('사용자 확인 중 오류가 발생했습니다.');}if(existingUsers&&existingUsers.length>0){throw new Error('이미 존재하는 이메일입니다.');}// 새 사용자 생성 (Supabase에 저장)\nconst{data:newUser,error:insertError}=await supabase.from('users').insert([{username,email,password:password// 실제 프로덕션에서는 해시된 비밀번호 사용\n}]).select().single();if(insertError){console.error('사용자 생성 오류:',insertError);throw new Error('회원가입 중 오류가 발생했습니다.');}// 로컬 스토리지에도 저장\nlocalStorage.setItem('user',JSON.stringify(newUser));setCurrentUser(newUser);console.log('회원가입 성공:',newUser);return newUser;}catch(error){console.error('회원가입 오류:',error);throw error;}};const login=async(email,password)=>{try{// Supabase에서 사용자 확인\nconst{data:users,error}=await supabase.from('users').select('*').eq('email',email);if(error){console.error('로그인 확인 오류:',error);throw new Error('로그인 확인 중 오류가 발생했습니다.');}if(!users||users.length===0){throw new Error('존재하지 않는 이메일입니다.');}const user=users[0];// 테스트 계정 확인 (비밀번호 검증 생략)\nif(email==='test@test.com'&&password==='123456'){localStorage.setItem('user',JSON.stringify(user));setCurrentUser(user);console.log('테스트 계정 로그인 성공:',user);return user;}// 일반 계정은 비밀번호 검증 없이 로그인 허용 (데모용)\nlocalStorage.setItem('user',JSON.stringify(user));setCurrentUser(user);console.log('로그인 성공:',user);return user;}catch(error){console.error('로그인 오류:',error);throw error;}};const logout=()=>{localStorage.removeItem('user');setCurrentUser(null);console.log('로그아웃 완료');};const value={currentUser,signup,login,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signup","email","password","username","data","existingUsers","error","checkError","from","select","eq","console","length","newUser","insertError","insert","single","setItem","stringify","log","login","users","user","logout","removeItem","value","Provider"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = async (email, password, username) => {\n    try {\n      // Supabase에서 기존 사용자 확인\n      const { data: existingUsers, error: checkError } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', email);\n      \n      if (checkError) {\n        console.error('사용자 확인 오류:', checkError);\n        throw new Error('사용자 확인 중 오류가 발생했습니다.');\n      }\n\n      if (existingUsers && existingUsers.length > 0) {\n        throw new Error('이미 존재하는 이메일입니다.');\n      }\n\n      // 새 사용자 생성 (Supabase에 저장)\n      const { data: newUser, error: insertError } = await supabase\n        .from('users')\n        .insert([\n          {\n            username,\n            email,\n            password: password // 실제 프로덕션에서는 해시된 비밀번호 사용\n          }\n        ])\n        .select()\n        .single();\n\n      if (insertError) {\n        console.error('사용자 생성 오류:', insertError);\n        throw new Error('회원가입 중 오류가 발생했습니다.');\n      }\n\n      // 로컬 스토리지에도 저장\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      \n      console.log('회원가입 성공:', newUser);\n      return newUser;\n    } catch (error) {\n      console.error('회원가입 오류:', error);\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      // Supabase에서 사용자 확인\n      const { data: users, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', email);\n      \n      if (error) {\n        console.error('로그인 확인 오류:', error);\n        throw new Error('로그인 확인 중 오류가 발생했습니다.');\n      }\n\n      if (!users || users.length === 0) {\n        throw new Error('존재하지 않는 이메일입니다.');\n      }\n\n      const user = users[0];\n\n      // 테스트 계정 확인 (비밀번호 검증 생략)\n      if (email === 'test@test.com' && password === '123456') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user);\n        console.log('테스트 계정 로그인 성공:', user);\n        return user;\n      }\n\n      // 일반 계정은 비밀번호 검증 없이 로그인 허용 (데모용)\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      console.log('로그인 성공:', user);\n      return user;\n    } catch (error) {\n      console.error('로그인 오류:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n    console.log('로그아웃 완료');\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}