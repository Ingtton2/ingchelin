{"ast":null,"code":"import { supabase } from './supabase';\n\n// 레스토랑 관련 API\nexport const restaurantAPI = {\n  // 모든 레스토랑 조회\n  getAll: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*');\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // ID로 레스토랑 조회\n  getById: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').eq('id', id).single();\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 새 레스토랑 추가\n  create: async restaurant => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').insert(restaurant).select().single();\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 레스토랑 정보 수정\n  update: async (id, restaurant) => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').update(restaurant).eq('id', id).select().single();\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 레스토랑 삭제\n  delete: async id => {\n    const {\n      error\n    } = await supabase.from('restaurants').delete().eq('id', id);\n    if (error) throw error;\n    return {\n      success: true\n    };\n  },\n  // 요리 타입으로 검색\n  getByCuisine: async cuisine => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').eq('cuisine', cuisine);\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 평점으로 검색\n  getByRating: async rating => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').gte('rating', rating);\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 키워드로 검색\n  search: async keyword => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);\n    if (error) throw error;\n    return {\n      data\n    };\n  },\n  // 근처 레스토랑 검색\n  getNearby: async (lat, lng, radius = 0.01) => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*').not('latitude', 'is', null).not('longitude', 'is', null);\n    if (error) throw error;\n\n    // 클라이언트에서 거리 계산\n    const nearby = data.filter(restaurant => {\n      const distance = Math.sqrt(Math.pow(restaurant.latitude - lat, 2) + Math.pow(restaurant.longitude - lng, 2));\n      return distance <= radius;\n    });\n    return {\n      data: nearby\n    };\n  },\n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('restaurants').select('*');\n    if (error) throw error;\n    if (data && data.length > 0) {\n      const randomIndex = Math.floor(Math.random() * data.length);\n      return {\n        data: data[randomIndex]\n      };\n    }\n    return {\n      data: null\n    };\n  }\n};\nexport default restaurantAPI;","map":{"version":3,"names":["supabase","restaurantAPI","getAll","data","error","from","select","getById","id","eq","single","create","restaurant","insert","update","delete","success","getByCuisine","cuisine","getByRating","rating","gte","search","keyword","or","getNearby","lat","lng","radius","not","nearby","filter","distance","Math","sqrt","pow","latitude","longitude","getRandom","length","randomIndex","floor","random"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/services/api.js"],"sourcesContent":["import { supabase } from './supabase';\n\n// 레스토랑 관련 API\nexport const restaurantAPI = {\n  // 모든 레스토랑 조회\n  getAll: async () => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*');\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // ID로 레스토랑 조회\n  getById: async (id) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 새 레스토랑 추가\n  create: async (restaurant) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .insert(restaurant)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 레스토랑 정보 수정\n  update: async (id, restaurant) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .update(restaurant)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 레스토랑 삭제\n  delete: async (id) => {\n    const { error } = await supabase\n      .from('restaurants')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n    return { success: true };\n  },\n  \n  // 요리 타입으로 검색\n  getByCuisine: async (cuisine) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .eq('cuisine', cuisine);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 평점으로 검색\n  getByRating: async (rating) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .gte('rating', rating);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 키워드로 검색\n  search: async (keyword) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .or(`name.ilike.%${keyword}%,description.ilike.%${keyword}%`);\n    \n    if (error) throw error;\n    return { data };\n  },\n  \n  // 근처 레스토랑 검색\n  getNearby: async (lat, lng, radius = 0.01) => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*')\n      .not('latitude', 'is', null)\n      .not('longitude', 'is', null);\n    \n    if (error) throw error;\n    \n    // 클라이언트에서 거리 계산\n    const nearby = data.filter(restaurant => {\n      const distance = Math.sqrt(\n        Math.pow(restaurant.latitude - lat, 2) + \n        Math.pow(restaurant.longitude - lng, 2)\n      );\n      return distance <= radius;\n    });\n    \n    return { data: nearby };\n  },\n  \n  // 랜덤 레스토랑 추천\n  getRandom: async () => {\n    const { data, error } = await supabase\n      .from('restaurants')\n      .select('*');\n    \n    if (error) throw error;\n    \n    if (data && data.length > 0) {\n      const randomIndex = Math.floor(Math.random() * data.length);\n      return { data: data[randomIndex] };\n    }\n    \n    return { data: null };\n  },\n};\n\nexport default restaurantAPI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}