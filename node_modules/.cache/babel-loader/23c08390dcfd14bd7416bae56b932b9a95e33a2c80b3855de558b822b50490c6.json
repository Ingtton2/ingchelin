{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteContext = /*#__PURE__*/createContext();\nexport const useFavorites = () => {\n  _s();\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n_s(useFavorites, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const FavoriteProvider = ({\n  children\n}) => {\n  _s2();\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    user\n  } = useAuth();\n\n  // 사용자 즐겨찾기 목록 불러오기\n  const loadFavorites = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:8081/api/favorites/user/${user.id}`);\n      if (response.ok) {\n        const data = await response.json();\n        setFavorites(data.map(fav => fav.restaurant));\n      }\n    } catch (error) {\n      console.error('즐겨찾기 목록 불러오기 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 즐겨찾기 목록 불러오기\n  useEffect(() => {\n    if (user) {\n      loadFavorites();\n    } else {\n      setFavorites([]);\n    }\n  }, [user]);\n\n  // 찜 목록에 추가\n  const addToFavorites = async restaurant => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n    if (favorites.find(fav => fav.id === restaurant.id)) {\n      return; // 이미 즐겨찾기에 있음\n    }\n    try {\n      const response = await fetch('http://localhost:8081/api/favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          restaurantId: restaurant.id\n        })\n      });\n      if (response.ok) {\n        setFavorites(prev => [...prev, restaurant]);\n      } else {\n        console.error('즐겨찾기 추가 실패');\n      }\n    } catch (error) {\n      console.error('즐겨찾기 추가 중 오류:', error);\n    }\n  };\n\n  // 찜 목록에서 제거\n  const removeFromFavorites = async restaurantId => {\n    if (!user) return;\n    try {\n      const response = await fetch(`http://localhost:8081/api/favorites/user/${user.id}/restaurant/${restaurantId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setFavorites(prev => prev.filter(fav => fav.id !== restaurantId));\n      } else {\n        console.error('즐겨찾기 제거 실패');\n      }\n    } catch (error) {\n      console.error('즐겨찾기 제거 중 오류:', error);\n    }\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = restaurantId => {\n    return favorites.some(fav => fav.id === restaurantId);\n  };\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(FavoriteContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s2(FavoriteProvider, \"EQ/fGiYPhVSlUzWeWA1WwMFaz1o=\", false, function () {\n  return [useAuth];\n});\n_c = FavoriteProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoriteProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","FavoriteContext","useFavorites","_s","context","Error","FavoriteProvider","children","_s2","favorites","setFavorites","loading","setLoading","user","loadFavorites","response","fetch","id","ok","data","json","map","fav","restaurant","error","console","addToFavorites","alert","find","method","headers","body","JSON","stringify","userId","restaurantId","prev","removeFromFavorites","filter","isInFavorites","some","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\nconst FavoriteContext = createContext();\n\nexport const useFavorites = () => {\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n\nexport const FavoriteProvider = ({ children }) => {\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { user } = useAuth();\n\n  // 사용자 즐겨찾기 목록 불러오기\n  const loadFavorites = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:8081/api/favorites/user/${user.id}`);\n      if (response.ok) {\n        const data = await response.json();\n        setFavorites(data.map(fav => fav.restaurant));\n      }\n    } catch (error) {\n      console.error('즐겨찾기 목록 불러오기 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 즐겨찾기 목록 불러오기\n  useEffect(() => {\n    if (user) {\n      loadFavorites();\n    } else {\n      setFavorites([]);\n    }\n  }, [user]);\n\n  // 찜 목록에 추가\n  const addToFavorites = async (restaurant) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    if (favorites.find(fav => fav.id === restaurant.id)) {\n      return; // 이미 즐겨찾기에 있음\n    }\n\n    try {\n      const response = await fetch('http://localhost:8081/api/favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          restaurantId: restaurant.id\n        })\n      });\n\n      if (response.ok) {\n        setFavorites(prev => [...prev, restaurant]);\n      } else {\n        console.error('즐겨찾기 추가 실패');\n      }\n    } catch (error) {\n      console.error('즐겨찾기 추가 중 오류:', error);\n    }\n  };\n\n  // 찜 목록에서 제거\n  const removeFromFavorites = async (restaurantId) => {\n    if (!user) return;\n\n    try {\n      const response = await fetch(`http://localhost:8081/api/favorites/user/${user.id}/restaurant/${restaurantId}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        setFavorites(prev => prev.filter(fav => fav.id !== restaurantId));\n      } else {\n        console.error('즐겨찾기 제거 실패');\n      }\n    } catch (error) {\n      console.error('즐겨찾기 제거 중 오류:', error);\n    }\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = (restaurantId) => {\n    return favorites.some(fav => fav.id === restaurantId);\n  };\n\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites,\n    loading\n  };\n\n  return (\n    <FavoriteContext.Provider value={value}>\n      {children}\n    </FavoriteContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}