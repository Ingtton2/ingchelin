{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const VisitContext=/*#__PURE__*/createContext();export const useVisit=()=>{const context=useContext(VisitContext);if(!context){throw new Error('useVisit must be used within a VisitProvider');}return context;};export const VisitProvider=_ref=>{let{children}=_ref;const[visitStatus,setVisitStatus]=useState({});const[loading,setLoading]=useState(false);const{currentUser:user}=useAuth();// 사용자 방문 기록 불러오기\nconst loadVisitStatus=async()=>{if(!user)return;try{setLoading(true);const response=await fetch(`http://localhost:8080/api/visits/user/${user.id}`);if(response.ok){const visits=await response.json();const statusMap={};visits.forEach(visit=>{statusMap[visit.restaurant.id]=visit.rating>=4?'liked':'disliked';});setVisitStatus(statusMap);}}catch(error){console.error('방문 기록 불러오기 실패:',error);}finally{setLoading(false);}};// 사용자 로그인 시 방문 기록 불러오기\nuseEffect(()=>{if(user){loadVisitStatus();}else{setVisitStatus({});}},[user]);// 방문 상태 설정 (백엔드에 저장)\nconst setRestaurantVisitStatus=async(restaurantId,status)=>{if(!user){alert('로그인이 필요합니다.');return;}try{const rating=status==='liked'?5:2;// 좋아함: 5점, 싫어함: 2점\nconst response=await fetch('http://localhost:8080/api/visits',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:user.id,restaurantId:restaurantId,rating:rating,review:status==='liked'?'좋아요!':'별로예요.'})});if(response.ok){setVisitStatus(prev=>({...prev,[restaurantId]:status}));}else{console.error('방문 기록 저장 실패');}}catch(error){console.error('방문 기록 저장 중 오류:',error);}};// 방문 상태 가져오기\nconst getRestaurantVisitStatus=restaurantId=>{return visitStatus[restaurantId]||'not-visited';// 'liked', 'disliked', 'not-visited'\n};// 방문 상태별 통계\nconst getVisitStats=()=>{const stats={liked:0,disliked:0,notVisited:0};Object.values(visitStatus).forEach(status=>{if(status==='liked')stats.liked++;else if(status==='disliked')stats.disliked++;});// 전체 식당 수에서 방문한 곳을 빼면 안 가본 곳\nconst totalRestaurants=20;// 현재 식당 데이터 수\nstats.notVisited=totalRestaurants-stats.liked-stats.disliked;return stats;};const value={visitStatus,setRestaurantVisitStatus,getRestaurantVisitStatus,getVisitStats,loading};return/*#__PURE__*/_jsx(VisitContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsx","_jsx","VisitContext","useVisit","context","Error","VisitProvider","_ref","children","visitStatus","setVisitStatus","loading","setLoading","currentUser","user","loadVisitStatus","response","fetch","id","ok","visits","json","statusMap","forEach","visit","restaurant","rating","error","console","setRestaurantVisitStatus","restaurantId","status","alert","method","headers","body","JSON","stringify","userId","review","prev","getRestaurantVisitStatus","getVisitStats","stats","liked","disliked","notVisited","Object","values","totalRestaurants","value","Provider"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/VisitContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\nconst VisitContext = createContext();\n\nexport const useVisit = () => {\n  const context = useContext(VisitContext);\n  if (!context) {\n    throw new Error('useVisit must be used within a VisitProvider');\n  }\n  return context;\n};\n\nexport const VisitProvider = ({ children }) => {\n  const [visitStatus, setVisitStatus] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { currentUser: user } = useAuth();\n\n  // 사용자 방문 기록 불러오기\n  const loadVisitStatus = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:8080/api/visits/user/${user.id}`);\n      if (response.ok) {\n        const visits = await response.json();\n        const statusMap = {};\n        visits.forEach(visit => {\n          statusMap[visit.restaurant.id] = visit.rating >= 4 ? 'liked' : 'disliked';\n        });\n        setVisitStatus(statusMap);\n      }\n    } catch (error) {\n      console.error('방문 기록 불러오기 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 방문 기록 불러오기\n  useEffect(() => {\n    if (user) {\n      loadVisitStatus();\n    } else {\n      setVisitStatus({});\n    }\n  }, [user]);\n\n  // 방문 상태 설정 (백엔드에 저장)\n  const setRestaurantVisitStatus = async (restaurantId, status) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    try {\n      const rating = status === 'liked' ? 5 : 2; // 좋아함: 5점, 싫어함: 2점\n      \n      const response = await fetch('http://localhost:8080/api/visits', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          restaurantId: restaurantId,\n          rating: rating,\n          review: status === 'liked' ? '좋아요!' : '별로예요.'\n        })\n      });\n\n      if (response.ok) {\n        setVisitStatus(prev => ({\n          ...prev,\n          [restaurantId]: status\n        }));\n      } else {\n        console.error('방문 기록 저장 실패');\n      }\n    } catch (error) {\n      console.error('방문 기록 저장 중 오류:', error);\n    }\n  };\n\n  // 방문 상태 가져오기\n  const getRestaurantVisitStatus = (restaurantId) => {\n    return visitStatus[restaurantId] || 'not-visited'; // 'liked', 'disliked', 'not-visited'\n  };\n\n  // 방문 상태별 통계\n  const getVisitStats = () => {\n    const stats = {\n      liked: 0,\n      disliked: 0,\n      notVisited: 0\n    };\n\n    Object.values(visitStatus).forEach(status => {\n      if (status === 'liked') stats.liked++;\n      else if (status === 'disliked') stats.disliked++;\n    });\n\n    // 전체 식당 수에서 방문한 곳을 빼면 안 가본 곳\n    const totalRestaurants = 20; // 현재 식당 데이터 수\n    stats.notVisited = totalRestaurants - stats.liked - stats.disliked;\n\n    return stats;\n  };\n\n  const value = {\n    visitStatus,\n    setRestaurantVisitStatus,\n    getRestaurantVisitStatus,\n    getVisitStats,\n    loading\n  };\n\n  return (\n    <VisitContext.Provider value={value}>\n      {children}\n    </VisitContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}