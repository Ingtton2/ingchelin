{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{supabase}from'../services/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const FavoriteContext=/*#__PURE__*/createContext();export const useFavorites=()=>{const context=useContext(FavoriteContext);if(!context){throw new Error('useFavorites must be used within a FavoriteProvider');}return context;};export const FavoriteProvider=_ref=>{let{children}=_ref;const[favorites,setFavorites]=useState([]);const[loading,setLoading]=useState(false);const{currentUser:user}=useAuth();// 로컬 스토리지 완전 정리 함수\nconst clearLocalStorage=()=>{console.log('🔧 로컬 스토리지 정리 시작...');// 찜 관련 데이터 정리\nconst keysToRemove=['favorites','userRatings','visits','user'];keysToRemove.forEach(key=>{if(localStorage.getItem(key)){console.log(`🗑️ ${key} 삭제됨`);localStorage.removeItem(key);}});// 사용자별 찜 데이터도 정리\nif(user){const userSpecificKeys=[`visits_${user.id}`,`favorites_${user.id}`,`ratings_${user.id}`];userSpecificKeys.forEach(key=>{if(localStorage.getItem(key)){console.log(`🗑️ ${key} 삭제됨`);localStorage.removeItem(key);}});}console.log('✅ 로컬 스토리지 정리 완료');};// 컴포넌트 마운트 시 로컬 스토리지 정리\nuseEffect(()=>{clearLocalStorage();},[]);// 사용자 즐겨찾기 목록 불러오기 (Supabase에서)\nconst loadFavorites=async()=>{console.log('loadFavorites 호출됨, 사용자:',user);if(!user){console.log('사용자가 없어서 loadFavorites 중단');return;}try{setLoading(true);// 로컬 스토리지에서 기존 찜 데이터 정리 (디버깅용)\nconst oldFavorites=localStorage.getItem('favorites');if(oldFavorites){console.log('기존 로컬 스토리지 찜 데이터 발견:',oldFavorites);localStorage.removeItem('favorites');console.log('로컬 스토리지 찜 데이터 삭제됨');}// Supabase에서 사용자의 찜 목록 가져오기\nconst{data:favoritesData,error}=await supabase.from('favorites').select(`\n          *,\n          restaurants (*)\n        `).eq('user_id',user.id);if(error){console.error('Supabase에서 찜 목록 불러오기 실패:',error);setFavorites([]);return;}// restaurants 정보를 포함한 찜 목록 생성\nconst restaurants=favoritesData.map(fav=>fav.restaurants);console.log('Supabase에서 찜 목록 로드 완료:',restaurants.length,'개');console.log('로드된 찜 목록:',restaurants.map(r=>r.name));setFavorites(restaurants);}catch(error){console.error('즐겨찾기 목록 불러오기 실패:',error);setFavorites([]);}finally{setLoading(false);}};// 사용자 로그인 시 즐겨찾기 목록 불러오기\nuseEffect(()=>{console.log('사용자 상태 변경:',user);if(user){console.log('사용자 로그인됨, 찜 목록 불러오기 시작:',user.id);loadFavorites();}else{console.log('사용자 로그아웃됨, 찜 목록 초기화');setFavorites([]);}},[user]);// 찜 목록에 추가 (Supabase에 저장)\nconst addToFavorites=async restaurant=>{if(!user){alert('로그인이 필요합니다.');return;}// 이미 즐겨찾기에 있는지 확인\nif(favorites.find(fav=>fav.id===restaurant.id)){console.log('이미 즐겨찾기에 있음:',restaurant.id);return;}try{console.log('즐겨찾기 추가 시작:',{restaurantId:restaurant.id,userId:user.id,restaurantIdType:typeof restaurant.id,userIdType:typeof user.id,restaurant:restaurant});// 데이터 타입 확인 및 변환\nconst userId=parseInt(user.id);const restaurantId=parseInt(restaurant.id);if(isNaN(userId)||isNaN(restaurantId)){console.error('데이터 타입 오류:',{userId,restaurantId});alert('데이터 형식이 올바르지 않습니다.');return;}console.log('변환된 데이터:',{userId,restaurantId});// Supabase 연결 상태 확인\nconsole.log('Supabase 클라이언트 확인:',{supabaseUrl:supabase.supabaseUrl,hasClient:!!supabase});// 먼저 restaurants 테이블에 해당 레스토랑이 있는지 확인\nconst{data:existingRestaurant,error:restaurantCheckError}=await supabase.from('restaurants').select('id').eq('id',restaurantId).single();console.log('레스토랑 존재 확인:',{existingRestaurant,restaurantCheckError});if(restaurantCheckError){console.error('레스토랑 존재 확인 실패:',restaurantCheckError);alert('레스토랑 정보를 찾을 수 없습니다.');return;}// users 테이블에 해당 사용자가 있는지 확인\nconst{data:existingUser,error:userCheckError}=await supabase.from('users').select('id').eq('id',userId).single();console.log('사용자 존재 확인:',{existingUser,userCheckError});if(userCheckError){console.error('사용자 존재 확인 실패:',userCheckError);alert('사용자 정보를 찾을 수 없습니다.');return;}// Supabase에 찜하기 저장\nconst insertData={user_id:userId,restaurant_id:restaurantId,created_at:new Date().toISOString()};console.log('삽입할 데이터:',insertData);const{data:insertResult,error}=await supabase.from('favorites').insert(insertData).select();console.log('Supabase 삽입 결과:',{insertResult,error});if(error){console.error('Supabase 찜하기 저장 실패:',error);console.error('에러 상세 정보:',{code:error.code,message:error.message,details:error.details,hint:error.hint});alert(`찜하기 저장에 실패했습니다: ${error.message}`);return;// 실패 시 로컬 상태 업데이트하지 않음\n}console.log('Supabase 찜하기 저장 성공:',insertResult);// Supabase 저장 성공 시에만 로컬 상태 업데이트\nconst newFavorites=[...favorites,restaurant];setFavorites(newFavorites);console.log('즐겨찾기 추가 성공:',restaurant.id);alert('찜 목록에 추가되었습니다! 🎉');}catch(error){console.error('즐겨찾기 추가 중 예상치 못한 오류:',error);alert(`즐겨찾기 추가 중 오류가 발생했습니다: ${error.message}`);}};// 찜 목록에서 제거 (Supabase에서 삭제)\nconst removeFromFavorites=async restaurantId=>{console.log('removeFromFavorites 호출됨:',restaurantId,'사용자:',user);if(!user){console.log('사용자가 로그인되지 않음');return;}try{console.log('즐겨찾기 제거 시작:',{restaurantId:restaurantId,userId:user.id,restaurantIdType:typeof restaurantId,userIdType:typeof user.id});// 데이터 타입 확인 및 변환\nconst userId=parseInt(user.id);const restaurantIdInt=parseInt(restaurantId);if(isNaN(userId)||isNaN(restaurantIdInt)){console.error('데이터 타입 오류:',{userId,restaurantIdInt});alert('데이터 형식이 올바르지 않습니다.');return;}console.log('변환된 데이터:',{userId,restaurantIdInt});// Supabase에서 찜하기 삭제\nconst{error}=await supabase.from('favorites').delete().eq('user_id',userId).eq('restaurant_id',restaurantIdInt);if(error){console.error('Supabase 찜하기 삭제 실패:',error);alert(`찜하기 삭제에 실패했습니다: ${error.message}`);return;// 실패 시 로컬 상태 업데이트하지 않음\n}// Supabase 삭제 성공 시에만 로컬 상태 업데이트\nconst newFavorites=favorites.filter(fav=>fav.id!==restaurantId);setFavorites(newFavorites);console.log('즐겨찾기 제거 성공:',restaurantId);alert('찜 목록에서 제거되었습니다! ❌');}catch(error){console.error('즐겨찾기 제거 중 예상치 못한 오류:',error);alert(`즐겨찾기 제거 중 오류가 발생했습니다: ${error.message}`);}};// 찜 목록에 있는지 확인\nconst isInFavorites=restaurantId=>{const isFavorited=favorites.some(fav=>fav.id===restaurantId);console.log(`레스토랑 ${restaurantId} 찜 상태:`,isFavorited,'현재 찜 목록:',favorites.map(f=>f.id));return isFavorited;};const value={favorites,addToFavorites,removeFromFavorites,isInFavorites,loading};return/*#__PURE__*/_jsx(FavoriteContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","supabase","jsx","_jsx","FavoriteContext","useFavorites","context","Error","FavoriteProvider","_ref","children","favorites","setFavorites","loading","setLoading","currentUser","user","clearLocalStorage","console","log","keysToRemove","forEach","key","localStorage","getItem","removeItem","userSpecificKeys","id","loadFavorites","oldFavorites","data","favoritesData","error","from","select","eq","restaurants","map","fav","length","r","name","addToFavorites","restaurant","alert","find","restaurantId","userId","restaurantIdType","userIdType","parseInt","isNaN","supabaseUrl","hasClient","existingRestaurant","restaurantCheckError","single","existingUser","userCheckError","insertData","user_id","restaurant_id","created_at","Date","toISOString","insertResult","insert","code","message","details","hint","newFavorites","removeFromFavorites","restaurantIdInt","delete","filter","isInFavorites","isFavorited","some","f","value","Provider"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/FavoriteContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { supabase } from '../services/supabase';\n\nconst FavoriteContext = createContext();\n\nexport const useFavorites = () => {\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error('useFavorites must be used within a FavoriteProvider');\n  }\n  return context;\n};\n\nexport const FavoriteProvider = ({ children }) => {\n  const [favorites, setFavorites] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { currentUser: user } = useAuth();\n\n  // 로컬 스토리지 완전 정리 함수\n  const clearLocalStorage = () => {\n    console.log('🔧 로컬 스토리지 정리 시작...');\n    \n    // 찜 관련 데이터 정리\n    const keysToRemove = [\n      'favorites',\n      'userRatings', \n      'visits',\n      'user'\n    ];\n    \n    keysToRemove.forEach(key => {\n      if (localStorage.getItem(key)) {\n        console.log(`🗑️ ${key} 삭제됨`);\n        localStorage.removeItem(key);\n      }\n    });\n    \n    // 사용자별 찜 데이터도 정리\n    if (user) {\n      const userSpecificKeys = [\n        `visits_${user.id}`,\n        `favorites_${user.id}`,\n        `ratings_${user.id}`\n      ];\n      \n      userSpecificKeys.forEach(key => {\n        if (localStorage.getItem(key)) {\n          console.log(`🗑️ ${key} 삭제됨`);\n          localStorage.removeItem(key);\n        }\n      });\n    }\n    \n    console.log('✅ 로컬 스토리지 정리 완료');\n  };\n\n  // 컴포넌트 마운트 시 로컬 스토리지 정리\n  useEffect(() => {\n    clearLocalStorage();\n  }, []);\n\n  // 사용자 즐겨찾기 목록 불러오기 (Supabase에서)\n  const loadFavorites = async () => {\n    console.log('loadFavorites 호출됨, 사용자:', user);\n    if (!user) {\n      console.log('사용자가 없어서 loadFavorites 중단');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      \n      // 로컬 스토리지에서 기존 찜 데이터 정리 (디버깅용)\n      const oldFavorites = localStorage.getItem('favorites');\n      if (oldFavorites) {\n        console.log('기존 로컬 스토리지 찜 데이터 발견:', oldFavorites);\n        localStorage.removeItem('favorites');\n        console.log('로컬 스토리지 찜 데이터 삭제됨');\n      }\n      \n      // Supabase에서 사용자의 찜 목록 가져오기\n      const { data: favoritesData, error } = await supabase\n        .from('favorites')\n        .select(`\n          *,\n          restaurants (*)\n        `)\n        .eq('user_id', user.id);\n      \n      if (error) {\n        console.error('Supabase에서 찜 목록 불러오기 실패:', error);\n        setFavorites([]);\n        return;\n      }\n      \n      // restaurants 정보를 포함한 찜 목록 생성\n      const restaurants = favoritesData.map(fav => fav.restaurants);\n      console.log('Supabase에서 찜 목록 로드 완료:', restaurants.length, '개');\n      console.log('로드된 찜 목록:', restaurants.map(r => r.name));\n      setFavorites(restaurants);\n    } catch (error) {\n      console.error('즐겨찾기 목록 불러오기 실패:', error);\n      setFavorites([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 즐겨찾기 목록 불러오기\n  useEffect(() => {\n    console.log('사용자 상태 변경:', user);\n    if (user) {\n      console.log('사용자 로그인됨, 찜 목록 불러오기 시작:', user.id);\n      loadFavorites();\n    } else {\n      console.log('사용자 로그아웃됨, 찜 목록 초기화');\n      setFavorites([]);\n    }\n  }, [user]);\n\n  // 찜 목록에 추가 (Supabase에 저장)\n  const addToFavorites = async (restaurant) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    // 이미 즐겨찾기에 있는지 확인\n    if (favorites.find(fav => fav.id === restaurant.id)) {\n      console.log('이미 즐겨찾기에 있음:', restaurant.id);\n      return;\n    }\n\n    try {\n      console.log('즐겨찾기 추가 시작:', { \n        restaurantId: restaurant.id, \n        userId: user.id,\n        restaurantIdType: typeof restaurant.id,\n        userIdType: typeof user.id,\n        restaurant: restaurant\n      });\n      \n      // 데이터 타입 확인 및 변환\n      const userId = parseInt(user.id);\n      const restaurantId = parseInt(restaurant.id);\n\n      if (isNaN(userId) || isNaN(restaurantId)) {\n        console.error('데이터 타입 오류:', { userId, restaurantId });\n        alert('데이터 형식이 올바르지 않습니다.');\n        return;\n      }\n\n      console.log('변환된 데이터:', { userId, restaurantId });\n\n      // Supabase 연결 상태 확인\n      console.log('Supabase 클라이언트 확인:', {\n        supabaseUrl: supabase.supabaseUrl,\n        hasClient: !!supabase\n      });\n\n      // 먼저 restaurants 테이블에 해당 레스토랑이 있는지 확인\n      const { data: existingRestaurant, error: restaurantCheckError } = await supabase\n        .from('restaurants')\n        .select('id')\n        .eq('id', restaurantId)\n        .single();\n\n      console.log('레스토랑 존재 확인:', { existingRestaurant, restaurantCheckError });\n\n      if (restaurantCheckError) {\n        console.error('레스토랑 존재 확인 실패:', restaurantCheckError);\n        alert('레스토랑 정보를 찾을 수 없습니다.');\n        return;\n      }\n\n      // users 테이블에 해당 사용자가 있는지 확인\n      const { data: existingUser, error: userCheckError } = await supabase\n        .from('users')\n        .select('id')\n        .eq('id', userId)\n        .single();\n\n      console.log('사용자 존재 확인:', { existingUser, userCheckError });\n\n      if (userCheckError) {\n        console.error('사용자 존재 확인 실패:', userCheckError);\n        alert('사용자 정보를 찾을 수 없습니다.');\n        return;\n      }\n      \n      // Supabase에 찜하기 저장\n      const insertData = {\n        user_id: userId,\n        restaurant_id: restaurantId,\n        created_at: new Date().toISOString()\n      };\n\n      console.log('삽입할 데이터:', insertData);\n\n      const { data: insertResult, error } = await supabase\n        .from('favorites')\n        .insert(insertData)\n        .select();\n      \n      console.log('Supabase 삽입 결과:', { insertResult, error });\n      \n      if (error) {\n        console.error('Supabase 찜하기 저장 실패:', error);\n        console.error('에러 상세 정보:', {\n          code: error.code,\n          message: error.message,\n          details: error.details,\n          hint: error.hint\n        });\n        alert(`찜하기 저장에 실패했습니다: ${error.message}`);\n        return; // 실패 시 로컬 상태 업데이트하지 않음\n      }\n      \n      console.log('Supabase 찜하기 저장 성공:', insertResult);\n      \n      // Supabase 저장 성공 시에만 로컬 상태 업데이트\n      const newFavorites = [...favorites, restaurant];\n      setFavorites(newFavorites);\n      \n      console.log('즐겨찾기 추가 성공:', restaurant.id);\n      alert('찜 목록에 추가되었습니다! 🎉');\n    } catch (error) {\n      console.error('즐겨찾기 추가 중 예상치 못한 오류:', error);\n      alert(`즐겨찾기 추가 중 오류가 발생했습니다: ${error.message}`);\n    }\n  };\n\n  // 찜 목록에서 제거 (Supabase에서 삭제)\n  const removeFromFavorites = async (restaurantId) => {\n    console.log('removeFromFavorites 호출됨:', restaurantId, '사용자:', user);\n    if (!user) {\n      console.log('사용자가 로그인되지 않음');\n      return;\n    }\n\n    try {\n      console.log('즐겨찾기 제거 시작:', { \n        restaurantId: restaurantId, \n        userId: user.id,\n        restaurantIdType: typeof restaurantId,\n        userIdType: typeof user.id\n      });\n      \n      // 데이터 타입 확인 및 변환\n      const userId = parseInt(user.id);\n      const restaurantIdInt = parseInt(restaurantId);\n\n      if (isNaN(userId) || isNaN(restaurantIdInt)) {\n        console.error('데이터 타입 오류:', { userId, restaurantIdInt });\n        alert('데이터 형식이 올바르지 않습니다.');\n        return;\n      }\n\n      console.log('변환된 데이터:', { userId, restaurantIdInt });\n      \n      // Supabase에서 찜하기 삭제\n      const { error } = await supabase\n        .from('favorites')\n        .delete()\n        .eq('user_id', userId)\n        .eq('restaurant_id', restaurantIdInt);\n      \n      if (error) {\n        console.error('Supabase 찜하기 삭제 실패:', error);\n        alert(`찜하기 삭제에 실패했습니다: ${error.message}`);\n        return; // 실패 시 로컬 상태 업데이트하지 않음\n      }\n      \n      // Supabase 삭제 성공 시에만 로컬 상태 업데이트\n      const newFavorites = favorites.filter(fav => fav.id !== restaurantId);\n      setFavorites(newFavorites);\n      \n      console.log('즐겨찾기 제거 성공:', restaurantId);\n      alert('찜 목록에서 제거되었습니다! ❌');\n    } catch (error) {\n      console.error('즐겨찾기 제거 중 예상치 못한 오류:', error);\n      alert(`즐겨찾기 제거 중 오류가 발생했습니다: ${error.message}`);\n    }\n  };\n\n  // 찜 목록에 있는지 확인\n  const isInFavorites = (restaurantId) => {\n    const isFavorited = favorites.some(fav => fav.id === restaurantId);\n    console.log(`레스토랑 ${restaurantId} 찜 상태:`, isFavorited, '현재 찜 목록:', favorites.map(f => f.id));\n    return isFavorited;\n  };\n\n  const value = {\n    favorites,\n    addToFavorites,\n    removeFromFavorites,\n    isInFavorites,\n    loading\n  };\n\n  return (\n    <FavoriteContext.Provider value={value}>\n      {children}\n    </FavoriteContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}