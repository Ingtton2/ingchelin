{"ast":null,"code":"/**\n * 위치 정보 관련 유틸리티 함수들\n */\n\n// 위치 정보 지원 여부 확인\nexport const isGeolocationSupported = () => {\n  return 'geolocation' in navigator;\n};\n\n// 위치 권한 상태 확인\nexport const getLocationPermissionStatus = async () => {\n  if (!isGeolocationSupported()) {\n    return 'not-supported';\n  }\n  if (navigator.permissions) {\n    try {\n      const result = await navigator.permissions.query({\n        name: 'geolocation'\n      });\n      return result.state;\n    } catch (error) {\n      console.warn('권한 상태 확인 실패:', error);\n      return 'unknown';\n    }\n  }\n  return 'unknown';\n};\n\n// 위치 정보 가져오기\nexport const getCurrentLocation = (options = {}) => {\n  return new Promise((resolve, reject) => {\n    if (!isGeolocationSupported()) {\n      reject(new Error('이 브라우저는 위치 정보를 지원하지 않습니다.'));\n      return;\n    }\n    const defaultOptions = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 300000 // 5분\n    };\n    const finalOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude,\n        accuracy\n      } = position.coords;\n      resolve({\n        lat: latitude,\n        lng: longitude,\n        accuracy,\n        timestamp: position.timestamp\n      });\n    }, error => {\n      let errorMessage = '위치 정보를 가져올 수 없습니다.';\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = '위치 정보 접근이 거부되었습니다. 브라우저 설정에서 위치 정보 접근을 허용해주세요.';\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = '위치 정보를 사용할 수 없습니다.';\n          break;\n        case error.TIMEOUT:\n          errorMessage = '위치 정보 요청 시간이 초과되었습니다.';\n          break;\n        default:\n          errorMessage = '알 수 없는 오류가 발생했습니다.';\n      }\n      reject(new Error(errorMessage));\n    }, finalOptions);\n  });\n};\n\n// 두 지점 간의 거리 계산 (하버사인 공식)\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c; // km\n  return Math.round(distance * 100) / 100; // 소수점 둘째 자리까지 반올림\n};\n\n// 거리 포맷팅\nexport const formatDistance = distance => {\n  if (distance < 1) {\n    return `${Math.round(distance * 1000)}m`;\n  } else if (distance < 10) {\n    return `${distance.toFixed(1)}km`;\n  } else {\n    return `${Math.round(distance)}km`;\n  }\n};\n\n// 위치 기반 레스토랑 필터링\nexport const filterRestaurantsByDistance = (restaurants, userLocation, maxDistance = null) => {\n  if (!userLocation || !restaurants.length) {\n    return restaurants;\n  }\n  const restaurantsWithDistance = restaurants.map(restaurant => {\n    let distance = null;\n\n    // 다양한 위치 데이터 형식 지원\n    if (restaurant.latitude && restaurant.longitude) {\n      distance = calculateDistance(userLocation.lat, userLocation.lng, restaurant.latitude, restaurant.longitude);\n    } else if (restaurant.position && restaurant.position.lat && restaurant.position.lng) {\n      distance = calculateDistance(userLocation.lat, userLocation.lng, restaurant.position.lat, restaurant.position.lng);\n    } else if (restaurant.location && restaurant.location.lat && restaurant.location.lng) {\n      distance = calculateDistance(userLocation.lat, userLocation.lng, restaurant.location.lat, restaurant.location.lng);\n    }\n    return {\n      ...restaurant,\n      distance,\n      formattedDistance: distance ? formatDistance(distance) : null\n    };\n  });\n\n  // 거리순으로 정렬\n  const sortedRestaurants = restaurantsWithDistance.filter(restaurant => restaurant.distance !== null).sort((a, b) => a.distance - b.distance);\n\n  // 최대 거리 필터 적용\n  if (maxDistance) {\n    return sortedRestaurants.filter(restaurant => restaurant.distance <= maxDistance);\n  }\n  return sortedRestaurants;\n};\n\n// 위치 정보 캐싱\nconst locationCache = {\n  data: null,\n  timestamp: null,\n  maxAge: 5 * 60 * 1000 // 5분\n};\nexport const getCachedLocation = () => {\n  if (locationCache.data && locationCache.timestamp) {\n    const now = Date.now();\n    if (now - locationCache.timestamp < locationCache.maxAge) {\n      return locationCache.data;\n    }\n  }\n  return null;\n};\nexport const setCachedLocation = location => {\n  locationCache.data = location;\n  locationCache.timestamp = Date.now();\n};\n\n// 위치 정보 가져오기 (캐시 포함)\nexport const getLocationWithCache = async (options = {}) => {\n  // 캐시된 위치 정보 확인\n  const cachedLocation = getCachedLocation();\n  if (cachedLocation) {\n    return cachedLocation;\n  }\n\n  // 새로운 위치 정보 가져오기\n  try {\n    const location = await getCurrentLocation(options);\n    setCachedLocation(location);\n    return location;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 브라우저별 위치 설정 페이지 URL\nexport const getLocationSettingsUrl = () => {\n  const userAgent = navigator.userAgent;\n  if (userAgent.includes('Chrome')) {\n    return 'chrome://settings/content/location';\n  } else if (userAgent.includes('Firefox')) {\n    return 'about:preferences#privacy';\n  } else if (userAgent.includes('Safari')) {\n    return 'https://support.apple.com/ko-kr/guide/safari/sfri40732/mac';\n  } else if (userAgent.includes('Edge')) {\n    return 'edge://settings/privacy';\n  }\n  return null;\n};\n\n// 위치 정보 사용 안내 메시지\nexport const getLocationPermissionMessage = status => {\n  const messages = {\n    'granted': '위치 정보 접근이 허용되었습니다.',\n    'denied': '위치 정보 접근이 거부되었습니다. 브라우저 설정에서 위치 정보 접근을 허용해주세요.',\n    'prompt': '위치 정보 접근 권한이 필요합니다.',\n    'not-supported': '이 브라우저는 위치 정보를 지원하지 않습니다.',\n    'unknown': '위치 정보 권한 상태를 확인할 수 없습니다.'\n  };\n  return messages[status] || messages.unknown;\n};","map":{"version":3,"names":["isGeolocationSupported","navigator","getLocationPermissionStatus","permissions","result","query","name","state","error","console","warn","getCurrentLocation","options","Promise","resolve","reject","Error","defaultOptions","enableHighAccuracy","timeout","maximumAge","finalOptions","geolocation","getCurrentPosition","position","latitude","longitude","accuracy","coords","lat","lng","timestamp","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","distance","round","formatDistance","toFixed","filterRestaurantsByDistance","restaurants","userLocation","maxDistance","length","restaurantsWithDistance","map","restaurant","location","formattedDistance","sortedRestaurants","filter","sort","b","locationCache","data","maxAge","getCachedLocation","now","Date","setCachedLocation","getLocationWithCache","cachedLocation","getLocationSettingsUrl","userAgent","includes","getLocationPermissionMessage","status","messages","unknown"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/utils/locationUtils.js"],"sourcesContent":["/**\n * 위치 정보 관련 유틸리티 함수들\n */\n\n// 위치 정보 지원 여부 확인\nexport const isGeolocationSupported = () => {\n  return 'geolocation' in navigator;\n};\n\n// 위치 권한 상태 확인\nexport const getLocationPermissionStatus = async () => {\n  if (!isGeolocationSupported()) {\n    return 'not-supported';\n  }\n\n  if (navigator.permissions) {\n    try {\n      const result = await navigator.permissions.query({ name: 'geolocation' });\n      return result.state;\n    } catch (error) {\n      console.warn('권한 상태 확인 실패:', error);\n      return 'unknown';\n    }\n  }\n\n  return 'unknown';\n};\n\n// 위치 정보 가져오기\nexport const getCurrentLocation = (options = {}) => {\n  return new Promise((resolve, reject) => {\n    if (!isGeolocationSupported()) {\n      reject(new Error('이 브라우저는 위치 정보를 지원하지 않습니다.'));\n      return;\n    }\n\n    const defaultOptions = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 300000 // 5분\n    };\n\n    const finalOptions = { ...defaultOptions, ...options };\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude, accuracy } = position.coords;\n        resolve({\n          lat: latitude,\n          lng: longitude,\n          accuracy,\n          timestamp: position.timestamp\n        });\n      },\n      (error) => {\n        let errorMessage = '위치 정보를 가져올 수 없습니다.';\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = '위치 정보 접근이 거부되었습니다. 브라우저 설정에서 위치 정보 접근을 허용해주세요.';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = '위치 정보를 사용할 수 없습니다.';\n            break;\n          case error.TIMEOUT:\n            errorMessage = '위치 정보 요청 시간이 초과되었습니다.';\n            break;\n          default:\n            errorMessage = '알 수 없는 오류가 발생했습니다.';\n        }\n        \n        reject(new Error(errorMessage));\n      },\n      finalOptions\n    );\n  });\n};\n\n// 두 지점 간의 거리 계산 (하버사인 공식)\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // 지구의 반지름 (km)\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const distance = R * c; // km\n  return Math.round(distance * 100) / 100; // 소수점 둘째 자리까지 반올림\n};\n\n// 거리 포맷팅\nexport const formatDistance = (distance) => {\n  if (distance < 1) {\n    return `${Math.round(distance * 1000)}m`;\n  } else if (distance < 10) {\n    return `${distance.toFixed(1)}km`;\n  } else {\n    return `${Math.round(distance)}km`;\n  }\n};\n\n// 위치 기반 레스토랑 필터링\nexport const filterRestaurantsByDistance = (restaurants, userLocation, maxDistance = null) => {\n  if (!userLocation || !restaurants.length) {\n    return restaurants;\n  }\n\n  const restaurantsWithDistance = restaurants.map(restaurant => {\n    let distance = null;\n    \n    // 다양한 위치 데이터 형식 지원\n    if (restaurant.latitude && restaurant.longitude) {\n      distance = calculateDistance(\n        userLocation.lat,\n        userLocation.lng,\n        restaurant.latitude,\n        restaurant.longitude\n      );\n    } else if (restaurant.position && restaurant.position.lat && restaurant.position.lng) {\n      distance = calculateDistance(\n        userLocation.lat,\n        userLocation.lng,\n        restaurant.position.lat,\n        restaurant.position.lng\n      );\n    } else if (restaurant.location && restaurant.location.lat && restaurant.location.lng) {\n      distance = calculateDistance(\n        userLocation.lat,\n        userLocation.lng,\n        restaurant.location.lat,\n        restaurant.location.lng\n      );\n    }\n\n    return {\n      ...restaurant,\n      distance,\n      formattedDistance: distance ? formatDistance(distance) : null\n    };\n  });\n\n  // 거리순으로 정렬\n  const sortedRestaurants = restaurantsWithDistance\n    .filter(restaurant => restaurant.distance !== null)\n    .sort((a, b) => a.distance - b.distance);\n\n  // 최대 거리 필터 적용\n  if (maxDistance) {\n    return sortedRestaurants.filter(restaurant => restaurant.distance <= maxDistance);\n  }\n\n  return sortedRestaurants;\n};\n\n// 위치 정보 캐싱\nconst locationCache = {\n  data: null,\n  timestamp: null,\n  maxAge: 5 * 60 * 1000 // 5분\n};\n\nexport const getCachedLocation = () => {\n  if (locationCache.data && locationCache.timestamp) {\n    const now = Date.now();\n    if (now - locationCache.timestamp < locationCache.maxAge) {\n      return locationCache.data;\n    }\n  }\n  return null;\n};\n\nexport const setCachedLocation = (location) => {\n  locationCache.data = location;\n  locationCache.timestamp = Date.now();\n};\n\n// 위치 정보 가져오기 (캐시 포함)\nexport const getLocationWithCache = async (options = {}) => {\n  // 캐시된 위치 정보 확인\n  const cachedLocation = getCachedLocation();\n  if (cachedLocation) {\n    return cachedLocation;\n  }\n\n  // 새로운 위치 정보 가져오기\n  try {\n    const location = await getCurrentLocation(options);\n    setCachedLocation(location);\n    return location;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 브라우저별 위치 설정 페이지 URL\nexport const getLocationSettingsUrl = () => {\n  const userAgent = navigator.userAgent;\n  \n  if (userAgent.includes('Chrome')) {\n    return 'chrome://settings/content/location';\n  } else if (userAgent.includes('Firefox')) {\n    return 'about:preferences#privacy';\n  } else if (userAgent.includes('Safari')) {\n    return 'https://support.apple.com/ko-kr/guide/safari/sfri40732/mac';\n  } else if (userAgent.includes('Edge')) {\n    return 'edge://settings/privacy';\n  }\n  \n  return null;\n};\n\n// 위치 정보 사용 안내 메시지\nexport const getLocationPermissionMessage = (status) => {\n  const messages = {\n    'granted': '위치 정보 접근이 허용되었습니다.',\n    'denied': '위치 정보 접근이 거부되었습니다. 브라우저 설정에서 위치 정보 접근을 허용해주세요.',\n    'prompt': '위치 정보 접근 권한이 필요합니다.',\n    'not-supported': '이 브라우저는 위치 정보를 지원하지 않습니다.',\n    'unknown': '위치 정보 권한 상태를 확인할 수 없습니다.'\n  };\n  \n  return messages[status] || messages.unknown;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}