{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/VisitContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisitContext = /*#__PURE__*/createContext();\nexport const useVisit = () => {\n  _s();\n  const context = useContext(VisitContext);\n  if (!context) {\n    throw new Error('useVisit must be used within a VisitProvider');\n  }\n  return context;\n};\n_s(useVisit, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const VisitProvider = ({\n  children\n}) => {\n  _s2();\n  const [visitStatus, setVisitStatus] = useState({});\n  const [loading, setLoading] = useState(false);\n  const {\n    currentUser: user\n  } = useAuth();\n\n  // 사용자 방문 기록 불러오기\n  const loadVisitStatus = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      // 로컬 스토리지에서 방문 기록 불러오기\n      const savedVisits = localStorage.getItem(`visits_${user.id}`);\n      if (savedVisits) {\n        const visits = JSON.parse(savedVisits);\n        const statusMap = {};\n        visits.forEach(visit => {\n          statusMap[visit.restaurantId] = visit.rating >= 4 ? 'liked' : 'disliked';\n        });\n        setVisitStatus(statusMap);\n      } else {\n        setVisitStatus({});\n      }\n    } catch (error) {\n      console.error('방문 기록 불러오기 실패:', error);\n      setVisitStatus({});\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 방문 기록 불러오기\n  useEffect(() => {\n    if (user) {\n      loadVisitStatus();\n    } else {\n      setVisitStatus({});\n    }\n  }, [user]);\n\n  // 방문 상태 설정 (백엔드에 저장)\n  const setRestaurantVisitStatus = async (restaurantId, status) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n    try {\n      const rating = status === 'liked' ? 5 : 2; // 좋아함: 5점, 싫어함: 2점\n\n      const response = await fetch('http://localhost:8080/api/visits', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          restaurantId: restaurantId,\n          rating: rating,\n          review: status === 'liked' ? '좋아요!' : '별로예요.'\n        })\n      });\n      if (response.ok) {\n        setVisitStatus(prev => ({\n          ...prev,\n          [restaurantId]: status\n        }));\n      } else {\n        console.error('방문 기록 저장 실패');\n      }\n    } catch (error) {\n      console.error('방문 기록 저장 중 오류:', error);\n    }\n  };\n\n  // 방문 상태 가져오기\n  const getRestaurantVisitStatus = restaurantId => {\n    return visitStatus[restaurantId] || 'not-visited'; // 'liked', 'disliked', 'not-visited'\n  };\n\n  // 방문 상태별 통계\n  const getVisitStats = () => {\n    const stats = {\n      liked: 0,\n      disliked: 0,\n      notVisited: 0\n    };\n    Object.values(visitStatus).forEach(status => {\n      if (status === 'liked') stats.liked++;else if (status === 'disliked') stats.disliked++;\n    });\n\n    // 전체 식당 수에서 방문한 곳을 빼면 안 가본 곳\n    const totalRestaurants = 20; // 현재 식당 데이터 수\n    stats.notVisited = totalRestaurants - stats.liked - stats.disliked;\n    return stats;\n  };\n  const value = {\n    visitStatus,\n    setRestaurantVisitStatus,\n    getRestaurantVisitStatus,\n    getVisitStats,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(VisitContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s2(VisitProvider, \"Bg1eHdmoC5L9lnqHay9I4SFstz8=\", false, function () {\n  return [useAuth];\n});\n_c = VisitProvider;\nvar _c;\n$RefreshReg$(_c, \"VisitProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","VisitContext","useVisit","_s","context","Error","VisitProvider","children","_s2","visitStatus","setVisitStatus","loading","setLoading","currentUser","user","loadVisitStatus","savedVisits","localStorage","getItem","id","visits","JSON","parse","statusMap","forEach","visit","restaurantId","rating","error","console","setRestaurantVisitStatus","status","alert","response","fetch","method","headers","body","stringify","userId","review","ok","prev","getRestaurantVisitStatus","getVisitStats","stats","liked","disliked","notVisited","Object","values","totalRestaurants","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/VisitContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\nconst VisitContext = createContext();\n\nexport const useVisit = () => {\n  const context = useContext(VisitContext);\n  if (!context) {\n    throw new Error('useVisit must be used within a VisitProvider');\n  }\n  return context;\n};\n\nexport const VisitProvider = ({ children }) => {\n  const [visitStatus, setVisitStatus] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { currentUser: user } = useAuth();\n\n  // 사용자 방문 기록 불러오기\n  const loadVisitStatus = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      // 로컬 스토리지에서 방문 기록 불러오기\n      const savedVisits = localStorage.getItem(`visits_${user.id}`);\n      if (savedVisits) {\n        const visits = JSON.parse(savedVisits);\n        const statusMap = {};\n        visits.forEach(visit => {\n          statusMap[visit.restaurantId] = visit.rating >= 4 ? 'liked' : 'disliked';\n        });\n        setVisitStatus(statusMap);\n      } else {\n        setVisitStatus({});\n      }\n    } catch (error) {\n      console.error('방문 기록 불러오기 실패:', error);\n      setVisitStatus({});\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 로그인 시 방문 기록 불러오기\n  useEffect(() => {\n    if (user) {\n      loadVisitStatus();\n    } else {\n      setVisitStatus({});\n    }\n  }, [user]);\n\n  // 방문 상태 설정 (백엔드에 저장)\n  const setRestaurantVisitStatus = async (restaurantId, status) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n\n    try {\n      const rating = status === 'liked' ? 5 : 2; // 좋아함: 5점, 싫어함: 2점\n      \n      const response = await fetch('http://localhost:8080/api/visits', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          restaurantId: restaurantId,\n          rating: rating,\n          review: status === 'liked' ? '좋아요!' : '별로예요.'\n        })\n      });\n\n      if (response.ok) {\n        setVisitStatus(prev => ({\n          ...prev,\n          [restaurantId]: status\n        }));\n      } else {\n        console.error('방문 기록 저장 실패');\n      }\n    } catch (error) {\n      console.error('방문 기록 저장 중 오류:', error);\n    }\n  };\n\n  // 방문 상태 가져오기\n  const getRestaurantVisitStatus = (restaurantId) => {\n    return visitStatus[restaurantId] || 'not-visited'; // 'liked', 'disliked', 'not-visited'\n  };\n\n  // 방문 상태별 통계\n  const getVisitStats = () => {\n    const stats = {\n      liked: 0,\n      disliked: 0,\n      notVisited: 0\n    };\n\n    Object.values(visitStatus).forEach(status => {\n      if (status === 'liked') stats.liked++;\n      else if (status === 'disliked') stats.disliked++;\n    });\n\n    // 전체 식당 수에서 방문한 곳을 빼면 안 가본 곳\n    const totalRestaurants = 20; // 현재 식당 데이터 수\n    stats.notVisited = totalRestaurants - stats.liked - stats.disliked;\n\n    return stats;\n  };\n\n  const value = {\n    visitStatus,\n    setRestaurantVisitStatus,\n    getRestaurantVisitStatus,\n    getVisitStats,\n    loading\n  };\n\n  return (\n    <VisitContext.Provider value={value}>\n      {children}\n    </VisitContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}