{"ast":null,"code":"var _jsxFileName = \"/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const signup = async (email, password, username) => {\n    try {\n      const response = await fetch('http://localhost:8081/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          username\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '회원가입에 실패했습니다.');\n      }\n      const user = await response.json();\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:8080/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '로그인에 실패했습니다.');\n      }\n      const user = await response.json();\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","signup","email","password","username","response","fetch","method","headers","body","stringify","ok","errorData","json","error","user","setItem","login","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ingtto/Documents/GitHub/ingchelin/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 로컬 스토리지에서 사용자 정보 확인\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const signup = async (email, password, username) => {\n    try {\n      const response = await fetch('http://localhost:8081/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, username }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '회원가입에 실패했습니다.');\n      }\n\n      const user = await response.json();\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:8080/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '로그인에 실패했습니다.');\n      }\n\n      const user = await response.json();\n      localStorage.setItem('user', JSON.stringify(user));\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,SAAS,EAAE;MACbH,cAAc,CAACM,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;IACvC;IACAD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IAClD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEV,IAAI,CAACW,SAAS,CAAC;UAAER,KAAK;UAAEC,QAAQ;UAAEC;QAAS,CAAC;MACpD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIzB,KAAK,CAACwB,SAAS,CAACE,KAAK,IAAI,eAAe,CAAC;MACrD;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClChB,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEjB,IAAI,CAACW,SAAS,CAACK,IAAI,CAAC,CAAC;MAClDtB,cAAc,CAACsB,IAAI,CAAC;MACpB,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMG,KAAK,GAAG,MAAAA,CAAOf,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEV,IAAI,CAACW,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIzB,KAAK,CAACwB,SAAS,CAACE,KAAK,IAAI,cAAc,CAAC;MACpD;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClChB,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEjB,IAAI,CAACW,SAAS,CAACK,IAAI,CAAC,CAAC;MAClDtB,cAAc,CAACsB,IAAI,CAAC;MACpB,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOD,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBrB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC;IAC/B1B,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM2B,KAAK,GAAG;IACZ5B,WAAW;IACXS,MAAM;IACNgB,KAAK;IACLC,MAAM;IACNxB;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACqC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9B,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAClC,GAAA,CA/EWF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}